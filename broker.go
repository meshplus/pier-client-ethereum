// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package main

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BrokerABI is the input ABI used to generate the binding from.
const BrokerABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bitxhubID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_appchainID\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint64\",\"name\":\"_valThreshold\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"},{\"internalType\":\"uint64\",\"name\":\"_adminThreshold\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dstFullID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"srcFullID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"args\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"throwInterchainEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dstFullID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"srcFullID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"typ\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"result\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"throwReceiptEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"throwReceiptStatus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"asciiString\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"int64\",\"name\":\"status\",\"type\":\"int64\"}],\"name\":\"audit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destFullServiceID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"funcCall\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"args\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"funcCb\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"argsCb\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"funcRb\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"argsRb\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"isEncrypt\",\"type\":\"bool\"}],\"name\":\"emitInterchainEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"serviceID\",\"type\":\"string\"}],\"name\":\"genFullServiceID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chainID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"serviceID\",\"type\":\"string\"}],\"name\":\"genRemoteFullServiceID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chainID\",\"type\":\"string\"}],\"name\":\"getAppchainInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallbackMeta\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDstRollbackMeta\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInnerMeta\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLocalServiceList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"outServicePair\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"idx\",\"type\":\"uint64\"}],\"name\":\"getOutMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOuterMeta\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"inServicePair\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"idx\",\"type\":\"uint64\"}],\"name\":\"getReceiptMessage\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemoteServiceList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"srcFullID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destAddr\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"typ\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"callFunc\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"args\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64\",\"name\":\"txStatus\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"isEncrypt\",\"type\":\"bool\"}],\"name\":\"invokeInterchain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"srcAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dstFullID\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"typ\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"result\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64\",\"name\":\"txStatus\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"invokeReceipt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chainID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"broker\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ruleAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"trustRoot\",\"type\":\"bytes\"}],\"name\":\"registerAppchain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chainID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"serviceID\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"whiteList\",\"type\":\"address[]\"}],\"name\":\"registerRemoteService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BrokerFuncSigs maps the 4-byte function signature to its string representation.
var BrokerFuncSigs = map[string]string{
	"5e57966d": "addressToString(address)",
	"b38ff85f": "audit(address,int64)",
	"f4aa3077": "emitInterchainEvent(string,string,bytes[],string,bytes[],string,bytes[],bool)",
	"32358c6d": "genFullServiceID(string)",
	"c1606f17": "genRemoteFullServiceID(string,string)",
	"32570a46": "getAppchainInfo(string)",
	"3b6bbe4a": "getCallbackMeta()",
	"564b81ef": "getChainID()",
	"ed63513f": "getDstRollbackMeta()",
	"67b9fa3b": "getInnerMeta()",
	"34a55404": "getLocalServiceList()",
	"29793e6e": "getOutMessage(string,uint64)",
	"c20cab50": "getOuterMeta()",
	"ca6954da": "getReceiptMessage(string,uint64)",
	"aed18cf1": "getRemoteServiceList()",
	"8129fc1c": "initialize()",
	"a2f6aa32": "invokeInterchain(string,string,uint64,uint64,string,bytes[],uint64,bytes[],bool)",
	"c4a250e3": "invokeReceipt(string,string,uint64,uint64,bytes[],uint64,bytes[])",
	"4420e486": "register(address)",
	"3cc412cd": "registerAppchain(string,string,address,bytes)",
	"19bd2bb2": "registerRemoteService(string,string,address[])",
}

// BrokerBin is the compiled bytecode used for deploying new contracts.
var BrokerBin = "0x60806040523480156200001157600080fd5b5060405162005dfc38038062005dfc83398101604081905262000034916200033e565b855162000049906008906020890190620000d3565b5084516200005f906009906020880190620000d3565b5083516200007590600a90602087019062000158565b50600b80546001600160401b0319166001600160401b0385161790558151620000a690600c90602085019062000158565b50600d80546001600160401b0319166001600160401b0392909216919091179055506200043f9350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011657805160ff191683800117855562000146565b8280016001018555821562000146579182015b828111156200014657825182559160200191906001019062000129565b5062000154929150620001be565b5090565b828054828255906000526020600020908101928215620001b0579160200282015b82811115620001b057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000179565b5062000154929150620001d5565b5b80821115620001545760008155600101620001bf565b5b80821115620001545780546001600160a01b0319168155600101620001d6565b600082601f83011262000207578081fd5b81516001600160401b038111156200021d578182fd5b60208082026200022f82820162000418565b838152935081840185830182870184018810156200024c57600080fd5b60009250825b85811015620002855781516001600160a01b038116811462000272578485fd5b8352918401919084019060010162000252565b50505050505092915050565b600082601f830112620002a2578081fd5b81516001600160401b03811115620002b8578182fd5b6020620002ce601f8301601f1916820162000418565b92508183528481838601011115620002e557600080fd5b60005b8281101562000305578481018201518482018301528101620002e8565b82811115620003175760008284860101525b50505092915050565b80516001600160401b03811681146200033857600080fd5b92915050565b60008060008060008060c0878903121562000357578182fd5b86516001600160401b03808211156200036e578384fd5b6200037c8a838b0162000291565b9750602089015191508082111562000392578384fd5b620003a08a838b0162000291565b96506040890151915080821115620003b6578384fd5b620003c48a838b01620001f6565b9550620003d58a60608b0162000320565b94506080890151915080821115620003eb578384fd5b50620003fa89828a01620001f6565b9250506200040c8860a0890162000320565b90509295509295509295565b6040518181016001600160401b03811182821017156200043757600080fd5b604052919050565b6159ad806200044f6000396000f3fe60806040526004361061012a5760003560e01c806367b9fa3b116100ab578063c1606f171161006f578063c1606f171461032c578063c20cab501461034c578063c4a250e314610361578063ca6954da14610374578063ed63513f146103a3578063f4aa3077146103b85761012a565b806367b9fa3b146102ad5780638129fc1c146102c2578063a2f6aa32146102d7578063aed18cf1146102ea578063b38ff85f146102ff5761012a565b80633b6bbe4a116100f25780633b6bbe4a146102075780633cc412cd1461022a5780634420e4861461024a578063564b81ef1461026a5780635e57966d1461028d5761012a565b806319bd2bb21461012f57806329793e6e1461015157806332358c6d1461018957806332570a46146101b657806334a55404146101e5575b600080fd5b34801561013b57600080fd5b5061014f61014a366004614b0c565b6103d8565b005b34801561015d57600080fd5b5061017161016c366004614f00565b61057a565b6040516101809392919061541b565b60405180910390f35b34801561019557600080fd5b506101a96101a43660046149da565b610a5a565b6040516101809190615408565b3480156101c257600080fd5b506101d66101d13660046149da565b610a89565b60405161018093929190615453565b3480156101f157600080fd5b506101fa610d00565b604051610180919061536d565b34801561021357600080fd5b5061021c610db3565b604051610180929190615380565b34801561023657600080fd5b5061014f610245366004614a74565b610f70565b34801561025657600080fd5b5061014f6102653660046148b8565b61113a565b34801561027657600080fd5b5061027f611285565b604051610180929190615491565b34801561029957600080fd5b506101a96102a83660046148b8565b6113b4565b3480156102b957600080fd5b5061021c61150f565b3480156102ce57600080fd5b5061014f6116a9565b61014f6102e5366004614dee565b611a55565b3480156102f657600080fd5b506101fa611d2b565b34801561030b57600080fd5b5061031f61031a3660046148da565b611e03565b60405161018091906153df565b34801561033857600080fd5b506101a9610347366004614a14565b612046565b34801561035857600080fd5b5061021c612073565b61014f61036f366004614d12565b612221565b34801561038057600080fd5b5061039461038f366004614f00565b61293d565b6040516101809392919061533a565b3480156103af57600080fd5b5061021c612a8d565b3480156103c457600080fd5b5061014f6103d3366004614bee565b612c27565b6000805b600c5481101561041c57600c81815481106103f357fe5b6000918252602090912001546001600160a01b031633141561041457600191505b6001016103dc565b506001811515146104485760405162461bcd60e51b815260040161043f906155fc565b60405180910390fd5b600484604051610458919061508b565b90815260405160209181900391909101902060030154600160e01b900460ff1615156001146104995760405162461bcd60e51b815260040161043f906157b8565b6004846040516104a9919061508b565b90815260405160209181900391909101902060030154600160a01b90046001600160401b03166001146104ee5760405162461bcd60e51b815260040161043f90615581565b60606104fa8585612046565b90508260068260405161050d919061508b565b9081526020016040518091039020908051906020019061052e929190614499565b50600780546001810182556000919091528151610572917fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688019060208401906144fe565b505050505050565b6060806000610587614578565b601686604051610597919061508b565b9081526040805191829003602090810183206001600160401b0389166000908152908252829020608084018352805460ff16151584528251600180830180546060601f60026000199584161561010002959095019092169390930490810186900486028401830187529583018681529395948701949293909284928491908401828280156106665780601f1061063b57610100808354040283529160200191610666565b820191906000526020600020905b81548152906001019060200180831161064957829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b8282101561073f5760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561072b5780601f106107005761010080835404028352916020019161072b565b820191906000526020600020905b81548152906001019060200180831161070e57829003601f168201915b505050505081526020019060010190610694565b5050509152505081526040805160038401805460606020601f60026000196101006001871615020190941693909304928301819004810285018201865294840182815294909501949293919284929184918401828280156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156108ba5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108a65780601f1061087b576101008083540402835291602001916108a6565b820191906000526020600020905b81548152906001019060200180831161088957829003601f168201915b50505050508152602001906001019061080f565b5050509152505081526040805160058401805460606020601f600260001961010060018716150201909416939093049283018190048102850182018652948401828152949095019492939192849291849184018282801561095c5780601f106109315761010080835404028352916020019161095c565b820191906000526020600020905b81548152906001019060200180831161093f57829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015610a355760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610a215780601f106109f657610100808354040283529160200191610a21565b820191906000526020600020905b815481529060010190602001808311610a0457829003601f168201915b50505050508152602001906001019061098a565b5050509152505090525060208181015180519101519151909891975095509350505050565b60606008600983604051602001610a7393929190615246565b6040516020818303038152906040529050919050565b6060806000610a966145b3565b600485604051610aa6919061508b565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160e090810190935260c08201848152919390928492918491840182828015610b415780601f10610b1657610100808354040283529160200191610b41565b820191906000526020600020905b815481529060010190602001808311610b2457829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610be35780601f10610bb857610100808354040283529160200191610be3565b820191906000526020600020905b815481529060010190602001808311610bc657829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f81018390048302850183019091528084529381019390830182828015610c755780601f10610c4a57610100808354040283529160200191610c75565b820191906000526020600020905b815481529060010190602001808311610c5857829003601f168201915b5050509183525050600391909101546001600160a01b03811660208301526001600160401b03600160a01b820416604083015260ff600160e01b90910416151560609091015260a08101519091501515600114610ce45760405162461bcd60e51b815260040161043f906157b8565b6020810151604082015160609092015190969195509350915050565b60015460609081906001600160401b0381118015610d1d57600080fd5b50604051908082528060200260200182016040528015610d5157816020015b6060815260200190600190039081610d3c5790505b50905060005b600154811015610dad57610d8e6101a460018381548110610d7457fe5b6000918252602090912001546001600160a01b03166113b4565b828281518110610d9a57fe5b6020908102919091010152600101610d57565b50905090565b60608060606011805490506001600160401b0381118015610dd357600080fd5b50604051908082528060200260200182016040528015610dfd578160200160208202803683370190505b50905060005b6011546001600160401b0382161015610e915760136011826001600160401b031681548110610e2e57fe5b90600052602060002001604051610e45919061523a565b9081526040519081900360200190205482516001600160401b03918216918491908416908110610e7157fe5b6001600160401b0390921660209283029190910190910152600101610e03565b5060118181805480602002602001604051908101604052809291908181526020016000905b82821015610f615760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610f4d5780601f10610f2257610100808354040283529160200191610f4d565b820191906000526020600020905b815481529060010190602001808311610f3057829003601f168201915b505050505081526020019060010190610eb6565b50505050915092509250509091565b6000805b600c54811015610fb457600c8181548110610f8b57fe5b6000918252602090912001546001600160a01b0316331415610fac57600191505b600101610f74565b50600181151514610fd75760405162461bcd60e51b815260040161043f906155fc565b600485604051610fe7919061508b565b9081526040519081900360200190206003015460ff600160e01b90910416156110225760405162461bcd60e51b815260040161043f906154f6565b6040805160c081018252868152602081018690528082018490526001600160a01b038516606082015260016080820181905260a0820152905160049061106990889061508b565b908152602001604051809103902060008201518160000190805190602001906110939291906144fe565b5060208281015180516110ac92600185019201906144fe565b50604082015180516110c89160028401916020909101906144fe565b50606082015160039091018054608084015160a0909401511515600160e01b0260ff60e01b196001600160401b03909516600160a01b0267ffffffffffffffff60a01b196001600160a01b039095166001600160a01b0319909316929092179390931617929092161790555050505050565b6001600160a01b03811660009081526020819052604090205460ff168061117d57506001600160a01b0381166000908152600260208190526040909120015460ff165b1561118757611282565b600c546060906001600160401b03811180156111a257600080fd5b506040519080825280602002602001820160405280156111cc578160200160208202803683370190505b5060408051608081018252600080825260208083018281528385018681526001606086018190526001600160a01b038a168552600284529590932084518154925167ffffffffffffffff199093166001600160401b03918216176fffffffffffffffff00000000000000001916600160401b919093160291909117815591518051959650929491936112649390850192910190614499565b50606091909101516002909101805460ff1916911515919091179055505b50565b60088054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093849390926009929184918301828280156113175780601f106112ec57610100808354040283529160200191611317565b820191906000526020600020905b8154815290600101906020018083116112fa57829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959750869450925084019050828280156113a55780601f1061137a576101008083540402835291602001916113a5565b820191906000526020600020905b81548152906001019060200180831161138857829003601f168201915b50505050509050915091509091565b604080516028808252606082810190935283831b9183916020820181803683370190505090506000806000806000806113eb6145fd565b6113f48b61316a565b905060005b60148110156114de578060130360080260020a8a60601c6001600160a01b03168161142057fe5b049750601060ff8916049650866010028803955081816002026028811061144357fe5b6020020151945081816002026001016028811061145c57fe5b6020020151935061146d878661329f565b925082870160f81b89826002028151811061148457fe5b60200101906001600160f81b031916908160001a9053506114a5868561329f565b925082860160f81b8982600202600101815181106114bf57fe5b60200101906001600160f81b031916908160001a9053506001016113f9565b50876040516020016114f0919061528d565b6040516020818303038152906040529950505050505050505050919050565b60608060606010805490506001600160401b038111801561152f57600080fd5b50604051908082528060200260200182016040528015611559578160200160208202803683370190505b50905060005b6010548110156115d95760146010828154811061157857fe5b9060005260206000200160405161158f919061523a565b9081526040519081900360200190205482516001600160401b03909116908390839081106115b957fe5b6001600160401b039092166020928302919091019091015260010161155f565b5060108181805480602002602001604051908101604052809291908181526020016000905b82821015610f615760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156116955780601f1061166a57610100808354040283529160200191611695565b820191906000526020600020905b81548152906001019060200180831161167857829003601f168201915b5050505050815260200190600101906115fe565b60005b6010548110156117165760006014601083815481106116c757fe5b906000526020600020016040516116de919061523a565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff199092169190911790556001016116ac565b5060005b600f548110156117845760006012600f838154811061173557fe5b9060005260206000200160405161174c919061523a565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff1990921691909117905560010161171a565b5060005b6011548110156117f25760006013601183815481106117a357fe5b906000526020600020016040516117ba919061523a565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff19909216919091179055600101611788565b5060005b60105481101561186057600060156010838154811061181157fe5b90600052602060002001604051611828919061523a565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff199092169190911790556001016117f6565b5060005b6001548110156118bc5760008060006001848154811061188057fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600101611864565b5060005b600754811015611912576006600782815481106118d957fe5b906000526020600020016040516118f0919061523a565b9081526020016040518091039020600061190a919061461c565b6001016118c0565b5060005b60035481101561198557600260006003838154811061193157fe5b60009182526020808320909101546001600160a01b03168352820192909252604001812080546001600160801b031916815590611971600183018261461c565b50600201805460ff19169055600101611916565b5060005b600554811015611a0a576004600582815481106119a257fe5b906000526020600020016040516119b9919061523a565b90815260405190819003602001902060006119d4828261463a565b6119e260018301600061463a565b6119f060028301600061463a565b5060030180546001600160e81b0319169055600101611989565b50611a17600f600061467e565b611a236010600061467e565b611a2f6011600061467e565b611a3b6001600061461c565b611a476007600061467e565b611a536005600061467e565b565b6060611a6089610a5a565b90506060611a6e8b836132cc565b9050611a808b838b8b8b8b8b8b6132e1565b600160606001600160401b038716611ae457611aa48d611a9f8e6133fb565b6135d9565b611ab9611ab08d6133fb565b8a8a60006137bb565b9092509050611acb8d858d600061391b565b8115611ada5760019950611adf565b600299505b611b71565b8a6001600160401b0316601484604051611afe919061508b565b908152604051908190036020019020546001600160401b031610611b4457611b298d611a9f8e6133fb565b611b3e611b358d6133fb565b8a8a60016137bb565b90925090505b611b518d858d600261391b565b866001600160401b031660011415611b6c5760029950611b71565b600399505b604051806060016040528086151581526020018b6001600160401b0316815260200182815250601784604051611ba7919061508b565b908152602001604051809103902060008d6001600160401b03166001600160401b0316815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816001600160401b0302191690836001600160401b031602179055506040820151816001019080519060200190611c4192919061469c565b509050508415611cd0577fb937bccf7e091ff2fcaca3d0c1b630690aef46162e500478b6709ce9732042e58b858f8d866000604051908082528060200260200182016040528015611ca657816020015b6060815260200190600190039081611c915790505b50611cb088613a96565b604051611cc3979695949392919061585f565b60405180910390a1611d1c565b7fb937bccf7e091ff2fcaca3d0c1b630690aef46162e500478b6709ce9732042e58b858f8d8686611d0088613a96565b604051611d13979695949392919061585f565b60405180910390a15b50505050505050505050505050565b60606007805480602002602001604051908101604052809291908181526020016000905b82821015611dfa5760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611de65780601f10611dbb57610100808354040283529160200191611de6565b820191906000526020600020905b815481529060010190602001808311611dc957829003601f168201915b505050505081526020019060010190611d4f565b50505050905090565b600080805b600c54811015611e4857600c8181548110611e1f57fe5b6000918252602090912001546001600160a01b0316331415611e4057600191505b600101611e08565b50600181151514611e6b5760405162461bcd60e51b815260040161043f906155fc565b611e736146f5565b6001600160a01b038516600090815260026020908152604091829020825160808101845281546001600160401b038082168352600160401b909104168184015260018201805485518186028101860187528181529295939493860193830182828015611f0857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611eea575b50505091835250506002919091015460ff16151560209091015290506000611f308286613af5565b905080611f425760009350505061203f565b8060011415611ff7576001600160a01b038616600090815260026020526040812080546001600160801b031916815590611f7f600183018261461c565b50600201805460ff199081169091556001600160a01b038716600081815260208190526040812080549093166001908117909355825480840184559290527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690910180546001600160a01b0319169091179055612038565b6001600160a01b038616600090815260026020526040812080546001600160801b03191681559061202b600183018261461c565b50600201805460ff191690555b6001935050505b5092915050565b6060828260405160200161205b9291906152b7565b60405160208183030381529060405290505b92915050565b6060806060600f805490506001600160401b038111801561209357600080fd5b506040519080825280602002602001820160405280156120bd578160200160208202803683370190505b50905060005b600f546001600160401b0382161015612151576012600f826001600160401b0316815481106120ee57fe5b90600052602060002001604051612105919061523a565b9081526040519081900360200190205482516001600160401b0391821691849190841690811061213157fe5b6001600160401b03909216602092830291909101909101526001016120c3565b50600f8181805480602002602001604051908101604052809291908181526020016000905b82821015610f615760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561220d5780601f106121e25761010080835404028352916020019161220d565b820191906000526020600020905b8154815290600101906020018083116121f057829003601f168201915b505050505081526020019060010190612176565b606061222c88610a5a565b600a5490915060009061229157856001600160401b03166001148061225a5750856001600160401b03166002145b6122765760405162461bcd60e51b815260040161043f906156bc565b856001600160401b03166002141561228c575060015b6122bc565b6001600160401b038416158015906122b35750836001600160401b0316600314155b156122bc575060015b6122c9828989600161391b565b6122d882898989898989613c62565b60606122e4838a6132cc565b90506122ee61471d565b6016826040516122fe919061508b565b90815260408051602092819003830181206001600160401b038d166000908152908452829020600301805460026001821615610100026000190190911604601f81018590049094028201606090810184529282018481529193909284929184918401828280156123af5780601f10612384576101008083540402835291602001916123af565b820191906000526020600020905b81548152906001019060200180831161239257829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156124885760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156124745780601f1061244957610100808354040283529160200191612474565b820191906000526020600020905b81548152906001019060200180831161245757829003601f168201915b5050505050815260200190600101906123dd565b5050505081525050905060608751826020015151016001600160401b03811180156124b257600080fd5b506040519080825280602002602001820160405280156124e657816020015b60608152602001906001900390816124d15790505b50905083156126e6576016836040516124ff919061508b565b90815260408051602092819003830181206001600160401b038e166000908152908452829020600501805460026001821615610100026000190190911604601f81018590049094028201606090810184529282018481529193909284929184918401828280156125b05780601f10612585576101008083540402835291602001916125b0565b820191906000526020600020905b81548152906001019060200180831161259357829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156126895760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156126755780601f1061264a57610100808354040283529160200191612675565b820191906000526020600020905b81548152906001019060200180831161265857829003601f168201915b5050505050815260200190600101906125de565b505050508152505091508160200151516001600160401b03811180156126ae57600080fd5b506040519080825280602002602001820160405280156126e257816020015b60608152602001906001900390816126cd5790505b5090505b60005b82602001515181101561272d578260200151818151811061270657fe5b602002602001015182828151811061271a57fe5b60209081029190910101526001016126e9565b508361277b5760005b88518110156127795788818151811061274b57fe5b60200260200101518282856020015151018151811061276657fe5b6020908102919091010152600101612736565b505b60405160200161278a90615300565b60408051601f19818403018152908290528051602091820120845190926127b1920161508b565b60405160208183030381529060405280519060200120146128f65781516040516060916127e09160200161515e565b6040516020818303038152906040529050600060606127fe8f6133fb565b6001600160a01b031683856040516024016128199190615303565b60408051601f1981840301815290829052916128349161508b565b60408051918290039091206020830180516001600160e01b03166001600160e01b03199092169190911790525161286b919061508b565b6000604051808303816000865af19150503d80600081146128a8576040519150601f19603f3d011682016040523d82523d6000602084013e6128ad565b606091505b50915091507fdadb08102ef1bab9720995485cebd09625dc443d3e2b5b9577b37a24de97beae826040516128e191906153df565b60405180910390a15050505050505050612934565b7fdadb08102ef1bab9720995485cebd09625dc443d3e2b5b9577b37a24de97beae600160405161292691906153df565b60405180910390a150505050505b50505050505050565b606060008061294a614737565b60178660405161295a919061508b565b9081526040805191829003602090810183206001600160401b03808a166000908152918352838220606086018552805460ff811615158752610100900490911685840152600181018054855181860281018601875281815292958701949293919290919084015b82821015612a6c5760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015612a585780601f10612a2d57610100808354040283529160200191612a58565b820191906000526020600020905b815481529060010190602001808311612a3b57829003601f168201915b5050505050815260200190600101906129c1565b50505091525050604081015160208201519151909891975095509350505050565b60608060606010805490506001600160401b0381118015612aad57600080fd5b50604051908082528060200260200182016040528015612ad7578160200160208202803683370190505b50905060005b601054811015612b5757601560108281548110612af657fe5b90600052602060002001604051612b0d919061523a565b9081526040519081900360200190205482516001600160401b0390911690839083908110612b3757fe5b6001600160401b0390921660209283029190910190910152600101612add565b5060108181805480602002602001604051908101604052809291908181526020016000905b82821015610f615760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015612c135780601f10612be857610100808354040283529160200191612c13565b820191906000526020600020905b815481529060010190602001808311612bf657829003601f168201915b505050505081526020019060010190612b7c565b3360009081526020819052604090205460ff161515600114612c5b5760405162461bcd60e51b815260040161043f906154bf565b6060612c696101a4336113b4565b90506060612c77828b6132cc565b600b549091506001600160401b0316612e1b576000805b600754811015612d135760078181548110612ca557fe5b90600052602060002001604051602001612cbf919061523a565b604051602081830303815290604052805190602001208c604051602001612ce6919061508b565b604051602081830303815290604052805190602001201415612d0b5760019150612d13565b600101612c8e565b50600181151514612d365760405162461bcd60e51b815260040161043f906155c7565b60009050606060068c604051612d4c919061508b565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015612da857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612d8a575b5050505050905060005b8151811015612df957818181518110612dc757fe5b60200260200101516001600160a01b0316336001600160a01b03161415612df15760019250612df9565b600101612db2565b508115612e185760405162461bcd60e51b815260040161043f9061566a565b50505b601281604051612e2b919061508b565b90815260405190819003602001812080546001600160401b038082166001011667ffffffffffffffff19909116179055601290612e6990839061508b565b908152604051908190036020019020546001600160401b031660011415612ecf57600f80546001810182556000919091528151612ecd917f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802019060208401906144fe565b505b6040518060800160405280841515815260200160405180604001604052808c81526020018b815250815260200160405180604001604052808a8152602001898152508152602001604051806040016040528088815260200187815250815250601682604051612f3e919061508b565b90815260200160405180910390206000601284604051612f5e919061508b565b9081526040805160209281900383019020546001600160401b031683528282019390935291016000208251815460ff19169015151781558282015180518051929391926001850192612fb49284929101906144fe565b506020828101518051612fcd926001850192019061469c565b5050506040820151805180516003840191612fed918391602001906144fe565b506020828101518051613006926001850192019061469c565b5050506060820151805180516005840191613026918391602001906144fe565b50602082810151805161303f926001850192019061469c565b505050905050606089604051602001613058919061508b565b604051602081830303815290604052905060005b89518110156130b557818a828151811061308257fe5b602002602001015160405160200161309b9291906150db565b60408051601f19818403018152919052915060010161306c565b5080516020820120841561310057604080516020808201835260008083528351818152918201909352909c50906130fc565b60608152602001906001900390816130e75790505b5099505b7f709f2860ba85ce973413f9ae5240df255cb8abe488e609da35106f143e2cdb49601284604051613131919061508b565b908152602001604051809103902060009054906101000a90046001600160401b03168d868e8e86604051612926969594939291906157ef565b6131726145fd565b606082901b600061318282613fa8565b604051602001613192919061508b565b60405160208183030381529060405280519060200120905060008060008060005b60148110156132935760108782601481106131ca57fe5b1a816131d257fe5b0693506010848883601481106131e457fe5b1a0360ff16816131f057fe5b049450601086826020811061320157fe5b1a8161320957fe5b06915060108287836020811061321b57fe5b1a0360ff168161322757fe5b04925060098560ff16118015613240575060078360ff16115b88826002026028811061324f57fe5b91151560209092020152600960ff851611801561326f575060078260ff16115b88826002026001016028811061328157fe5b911515602090920201526001016131b3565b50505050505050919050565b6000600a8360ff1610156132b55750603061206d565b81156132c35750603761206d565b50605792915050565b6060828260405160200161205b9291906151fe565b600b546001600160401b03166132f6576133f1565b60608888888860405160200161330f949392919061510a565b6040516020818303038152906040529050606085604051602001613333919061508b565b604051602081830303815290604052905060005b8551811015613390578186828151811061335d57fe5b60200260200101516040516020016133769291906150db565b60408051601f198184030181529190529150600101613347565b50818180519060200120856040516020016133ad939291906150a7565b60408051601f19818403018152919052805160208201209092506133d181856140a2565b6133ed5760405162461bcd60e51b815260040161043f90615633565b5050505b5050505050505050565b80516000908290602a14613440578260405160200161341a919061518b565b60408051601f198184030181529082905262461bcd60e51b825261043f91600401615408565b6000808060025b602a8110156135ce576101008402935084818151811061346357fe5b0160200151855160f89190911c935085906001830190811061348157fe5b016020015160f81c915060616001600160a01b038416108015906134af57506066836001600160a01b031611155b156134bf57605783039250613523565b6041836001600160a01b0316101580156134e357506046836001600160a01b031611155b156134f357603783039250613523565b6030836001600160a01b03161015801561351757506039836001600160a01b031611155b15613523576030830392505b6061826001600160a01b03161015801561354757506066826001600160a01b031611155b15613557576057820391506135bb565b6041826001600160a01b03161015801561357b57506046826001600160a01b031611155b1561358b576037820391506135bb565b6030826001600160a01b0316101580156135af57506039826001600160a01b031611155b156135bb576030820391505b6010830282019390930192600201613447565b509195945050505050565b6001600160a01b03811660009081526020819052604090205460ff1615156001146136165760405162461bcd60e51b815260040161043f9061573a565b600b546001600160401b03166137b7576000805b6007548110156136af576007818154811061364157fe5b9060005260206000200160405160200161365b919061523a565b6040516020818303038152906040528051906020012084604051602001613682919061508b565b6040516020818303038152906040528051906020012014156136a757600191506136af565b60010161362a565b506001811515146136d25760405162461bcd60e51b815260040161043f906155c7565b6000905060606006846040516136e8919061508b565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561374457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613726575b5050505050905060005b81518110156137955781818151811061376357fe5b60200260200101516001600160a01b0316846001600160a01b0316141561378d5760019250613795565b60010161374e565b5081156137b45760405162461bcd60e51b815260040161043f9061566a565b50505b5050565b6000606060006001905060606040516020016137d690615300565b60405160208183030381529060405280519060200120876040516020016137fd919061508b565b604051602081830303815290604052805190602001201461390e5760006060896001600160a01b03168960405160200161383791906151cc565b6040516020818303038152906040528989604051602401613859929190615316565b60408051601f1981840301815290829052916138749161508b565b60408051918290039091206020830180516001600160e01b03166001600160e01b0319909216919091179052516138ab919061508b565b6000604051808303816000865af19150503d80600081146138e8576040519150601f19603f3d011682016040523d82523d6000602084013e6138ed565b606091505b5091509150819350808060200190518101906139099190614918565b925050505b9097909650945050505050565b606061392785856132cc565b90506001600160401b03821661398857826001600160401b0316601482604051613951919061508b565b908152604051908190036020019020546001600160401b03908116600101161461397a57600080fd5b613983816142ad565b613a8f565b816001600160401b0316600114156139e757826001600160401b03166013826040516139b4919061508b565b908152604051908190036020019020546001600160401b0390811660010116146139dd57600080fd5b613983818461435f565b816001600160401b031660021415613a8f57826001600160401b0316601582604051613a13919061508b565b908152604051908190036020019020546001600160401b03908116600101161115613a3d57600080fd5b613a478184614416565b826001600160401b0316601482604051613a61919061508b565b908152604051908190036020019020546001600160401b03908116600101161415613a8f57613a8f816142ad565b5050505050565b6000606060005b8351811015613ae65781848281518110613ab357fe5b6020026020010151604051602001613acc9291906150db565b60408051601f198184030181529190529150600101613a9d565b50805160209091012092915050565b60008260600151613b185760405162461bcd60e51b815260040161043f90615703565b8160070b60001480613b2d57508160070b6001145b613b495760405162461bcd60e51b815260040161043f90615781565b60005b836040015151811015613baa57336001600160a01b031684604001518281518110613b7357fe5b60200260200101516001600160a01b03161415613ba25760405162461bcd60e51b815260040161043f9061553f565b600101613b4c565b5033836040015184600001518560200151016001600160401b031681518110613bcf57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508160070b60001415613c32576020830180516001600160401b036001918201811692839052600d54600c5491169003011415613c2d5750600261206d565b613c59565b82516001016001600160401b03908116808552600d549091161415613c595750600161206d565b50600092915050565b600b546001600160401b0316613c7757612934565b606087878787604051602001613c90949392919061510a565b60405160208183030381529060405290506060856001600160401b031660001415613ef2576060613cc18a8a6132cc565b9050613ccb61471d565b601682604051613cdb919061508b565b90815260408051602092819003830181206001600160401b038d1660009081529084528290206001908101805460029281161561010002600019011691909104601f8101859004909402820160609081018452928201848152919390928492918491840182828015613d8e5780601f10613d6357610100808354040283529160200191613d8e565b820191906000526020600020905b815481529060010190602001808311613d7157829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015613e675760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015613e535780601f10613e2857610100808354040283529160200191613e53565b820191906000526020600020905b815481529060010190602001808311613e3657829003601f168201915b505050505081526020019060010190613dbc565b505050915250508051604051919250613e85918591906020016150db565b604051602081830303815290604052925060005b816020015151811015613eea578382602001518281518110613eb757fe5b6020026020010151604051602001613ed09291906150db565b60408051601f198184030181529190529350600101613e99565b505050613f40565b60005b8551811015613f3e5781868281518110613f0b57fe5b6020026020010151604051602001613f249291906150db565b60408051601f198184030181529190529150600101613ef5565b505b81818051906020012085604051602001613f5c939291906150a7565b60408051601f1981840301815291905280516020820120909250613f8081856140a2565b613f9c5760405162461bcd60e51b815260040161043f90615633565b50505050505050505050565b604080516028808252606082810190935282919060208201818036833701905050905060008080805b6014811015614097578060130360080260020a8760601c6001600160a01b031681613ff857fe5b049350601060ff85160492508260100284039150600a8360ff161061401e576057614021565b60305b830160f81b85826002028151811061403557fe5b60200101906001600160f81b031916908160001a905350600a8260ff161061405e576057614061565b60305b820160f81b85826002026001018151811061407857fe5b60200101906001600160f81b031916908160001a905350600101613fd1565b509295945050505050565b6000805b82518110156142a05760608382815181106140bd57fe5b6020026020010151905080516041146140d65750614298565b60008060006140e484614427565b92509250925060006001898585856040516000815260200160405260405161410f94939291906153ea565b6020604051602081039080840390855afa158015614131573d6000803e3d6000fd5b5050506020604051035190506141a1600a80548060200260200160405190810160405280929190818152602001828054801561419657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614178575b505050505082614443565b1561429257614208600e805480602002602001604051908101604052809291908181526020018280548015614196576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161417857505050505082614443565b15614217575050505050614298565b600e805460018101825560008290527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b038416179055600b5490546001600160401b03909116141561429257614283600e600061461c565b6001965050505050505061206d565b50505050505b6001016140a6565b50613c59600e600061461c565b6014816040516142bd919061508b565b90815260405190819003602001812080546001600160401b038082166001011667ffffffffffffffff199091161790556014906142fb90839061508b565b908152604051908190036020019020546001600160401b031660011415611282576010805460018101825560009190915281516137b7917f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672019060208401906144fe565b60138260405161436f919061508b565b908152604051908190036020019020546001600160401b03166143d1576011805460018101825560009190915282516143cf917f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68019060208501906144fe565b505b806013836040516143e2919061508b565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff199092169190911790555050565b806015836040516143e2919061508b565b6020810151604082015160609092015160001a601b0192909190565b6000805b835181101561448f57826001600160a01b031684828151811061446657fe5b60200260200101516001600160a01b0316141561448757600191505061206d565b600101614447565b5060009392505050565b8280548282559060005260206000209081019282156144ee579160200282015b828111156144ee57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906144b9565b506144fa929150614756565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061453f57805160ff191683800117855561456c565b8280016001018555821561456c579182015b8281111561456c578251825591602001919060010190614551565b506144fa929150614775565b604051806080016040528060001515815260200161459461471d565b81526020016145a161471d565b81526020016145ae61471d565b905290565b6040518060c0016040528060608152602001606081526020016060815260200160006001600160a01b0316815260200160006001600160401b031681526020016000151581525090565b6040518061050001604052806028906020820280368337509192915050565b50805460008255906000526020600020908101906112829190614775565b50805460018160011615610100020316600290046000825580601f106146605750611282565b601f0160209004906000526020600020908101906112829190614775565b5080546000825590600052602060002090810190611282919061478a565b8280548282559060005260206000209081019282156146e9579160200282015b828111156146e957825180516146d99184916020909101906144fe565b50916020019190600101906146bc565b506144fa9291506147a7565b6040805160808101825260008082526020820181905260609282018390529181019190915290565b604051806040016040528060608152602001606081525090565b6040805160608082018352600080835260208301529181019190915290565b5b808211156144fa5780546001600160a01b0319168155600101614757565b5b808211156144fa5760008155600101614776565b808211156144fa57600061479e828261463a565b5060010161478a565b808211156144fa5760006147bb828261463a565b506001016147a7565b80356001600160a01b038116811461206d57600080fd5b600082601f8301126147eb578081fd5b81356147fe6147f9826158f4565b6158ce565b818152915060208083019084810160005b8481101561483857614826888484358a0101614853565b8452928201929082019060010161480f565b505050505092915050565b8035801515811461206d57600080fd5b600082601f830112614863578081fd5b81356148716147f982615913565b915080825283602082850101111561488857600080fd5b8060208401602084013760009082016020015292915050565b80356001600160401b038116811461206d57600080fd5b6000602082840312156148c9578081fd5b6148d383836147c4565b9392505050565b600080604083850312156148ec578081fd5b82356148f781615962565b91506020830135600781900b811461490d578182fd5b809150509250929050565b6000602080838503121561492a578182fd5b82516001600160401b0381111561493f578283fd5b8301601f8101851361494f578283fd5b805161495d6147f9826158f4565b81815283810190838501865b848110156149cc57815186018a603f820112614983578889fd5b878101516149936147f982615913565b81815260408d818486010111156149a8578b8cfd5b6149b7838c8401838701615936565b50865250509286019290860190600101614969565b509098975050505050505050565b6000602082840312156149eb578081fd5b81356001600160401b03811115614a00578182fd5b614a0c84828501614853565b949350505050565b60008060408385031215614a26578182fd5b82356001600160401b0380821115614a3c578384fd5b614a4886838701614853565b93506020850135915080821115614a5d578283fd5b50614a6a85828601614853565b9150509250929050565b60008060008060808587031215614a89578182fd5b84356001600160401b0380821115614a9f578384fd5b614aab88838901614853565b95506020870135915080821115614ac0578384fd5b614acc88838901614853565b945060408701359150614ade82615962565b90925060608601359080821115614af3578283fd5b50614b0087828801614853565b91505092959194509250565b600080600060608486031215614b20578283fd5b83356001600160401b0380821115614b36578485fd5b614b4287838801614853565b9450602091508186013581811115614b58578485fd5b614b6488828901614853565b945050604086013581811115614b78578384fd5b86019050601f81018713614b8a578283fd5b8035614b986147f9826158f4565b81815283810190838501858402850186018b1015614bb4578687fd5b8694505b83851015614bde57614bca8b826147c4565b835260019490940193918501918501614bb8565b5080955050505050509250925092565b600080600080600080600080610100898b031215614c0a578384fd5b88356001600160401b0380821115614c20578586fd5b614c2c8c838d01614853565b995060208b0135915080821115614c41578586fd5b614c4d8c838d01614853565b985060408b0135915080821115614c62578586fd5b614c6e8c838d016147db565b975060608b0135915080821115614c83578586fd5b614c8f8c838d01614853565b965060808b0135915080821115614ca4578586fd5b614cb08c838d016147db565b955060a08b0135915080821115614cc5578485fd5b614cd18c838d01614853565b945060c08b0135915080821115614ce6578384fd5b50614cf38b828c016147db565b925050614d038a60e08b01614843565b90509295985092959890939650565b600080600080600080600060e0888a031215614d2c578081fd5b87356001600160401b0380821115614d42578283fd5b614d4e8b838c01614853565b985060208a0135915080821115614d63578283fd5b614d6f8b838c01614853565b9750614d7e8b60408c016148a1565b9650614d8d8b60608c016148a1565b955060808a0135915080821115614da2578283fd5b614dae8b838c016147db565b9450614dbd8b60a08c016148a1565b935060c08a0135915080821115614dd2578283fd5b50614ddf8a828b016147db565b91505092959891949750929550565b60008060008060008060008060006101208a8c031215614e0c578283fd5b89356001600160401b0380821115614e22578485fd5b614e2e8d838e01614853565b9a5060208c0135915080821115614e43578485fd5b614e4f8d838e01614853565b9950614e5e8d60408e016148a1565b9850614e6d8d60608e016148a1565b975060808c0135915080821115614e82578485fd5b614e8e8d838e01614853565b965060a08c0135915080821115614ea3578485fd5b614eaf8d838e016147db565b9550614ebe8d60c08e016148a1565b945060e08c0135915080821115614ed3578283fd5b50614ee08c828d016147db565b925050614ef18b6101008c01614843565b90509295985092959850929598565b60008060408385031215614f12578182fd5b82356001600160401b0380821115614f28578384fd5b614f3486838701614853565b9350602085013591508082168214614f4a578283fd5b50809150509250929050565b6000815180845260208085018081965082840281019150828601855b85811015614f9c578284038952614f8a848351614fef565b98850198935090840190600101614f72565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b85811015614f9c578284038952614fdd848351614fef565b98850198935090840190600101614fc5565b60008151808452615007816020860160208601615936565b601f01601f19169290920160200192915050565b60008154600180821660008114615039576001811461505057615082565b60ff198316865260028304607f1686019350615082565b600283048560005260208060002060005b8381101561507a5781548a820152908501908201615061565b505050860193505b50505092915050565b6000825161509d818460208701615936565b9190910192915050565b600084516150b9818460208901615936565b919091019283525060c01b6001600160c01b0319166020820152602801919050565b600083516150ed818460208801615936565b835190830190615101818360208801615936565b01949350505050565b6000855161511c818460208a01615936565b855190830190615130818360208a01615936565b6001600160c01b031960c096871b8116919092019081529390941b9093166008830152506010019392505050565b60008251615170818460208701615936565b682862797465735b5d2960b81b920191825250600901919050565b6000825161519d818460208701615936565b7f206973206e6f7420612076616c69642061646472657373000000000000000000920191825250601701919050565b600082516151de818460208701615936565b6d2862797465735b5d2c626f6f6c2960901b920191825250600e01919050565b60008351615210818460208801615936565b602d60f81b908301908152835161522e816001840160208801615936565b01600101949350505050565b60006148d3828461501b565b6000615252828661501b565b601d60f91b808252615267600183018761501b565b9150808252508351615280816001840160208801615936565b0160010195945050505050565b600061060f60f31b825282516152aa816002850160208701615936565b9190910160020192915050565b6000601d60f91b80835284516152d4816001860160208901615936565b8084019050816001820152845191506152f4826002830160208801615936565b01600201949350505050565b90565b6000602082526148d36020830184614f56565b6000604082526153296040830185614f56565b905082151560208301529392505050565b60006060825261534d6060830186614f56565b6001600160401b0394909416602083015250901515604090910152919050565b6000602082526148d36020830184614fa9565b6000604082526153936040830185614fa9565b828103602084810191909152845180835285820192820190845b818110156153d25784516001600160401b0316835293830193918301916001016153ad565b5090979650505050505050565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6000602082526148d36020830184614fef565b60006060825261542e6060830186614fef565b82810360208401526154408186614f56565b9150508215156040830152949350505050565b6000606082526154666060830186614fef565b82810360208401526154788186614fef565b91505060018060a01b0383166040830152949350505050565b6000604082526154a46040830185614fef565b82810360208401526154b68185614fef565b95945050505050565b6020808252601d908201527f496e766f6b657220617265206e6f7420696e207768697465206c697374000000604082015260600190565b60208082526029908201527f7468697320617070636861696e2068617320616c7265616479206265656e20726040820152681959da5cdd195c995960ba1b606082015260800190565b60208082526022908201527f63757272656e74207573652068617320766f746564207468652070726f706f73604082015261185b60f21b606082015260800190565b60208082526026908201527f74686520617070636861696e277320737461747573206973206e6f7420617661604082015265696c61626c6560d01b606082015260800190565b6020808252818101527f72656d6f74652073657276696365206973206e6f742072656769737465726564604082015260600190565b6020808252601d908201527f496e766f6b657220617265206e6f7420696e2061646d696e206c697374000000604082015260600190565b60208082526017908201527f696e76616c6964206d756c74692d7369676e6174757265000000000000000000604082015260600190565b60208082526032908201527f72656d6f74652073657276696365206973206e6f7420616c6c6f77656420746f6040820152712063616c6c2064657374206164647265737360701b606082015260800190565b60208082526027908201527f494254502074797065206973206e6f7420636f727265637420696e20646972656040820152666374206d6f646560c81b606082015260800190565b6020808252601b908201527f7468652070726f706f73616c20646f6573206e6f742065786973740000000000604082015260600190565b60208082526027908201527f646573742061646472657373206973206e6f7420696e206c6f63616c207768696040820152661d19481b1a5cdd60ca1b606082015260800190565b6020808252601c908201527f766f7465207374617475732073686f756c642062652030206f72203100000000604082015260600190565b6020808252601f908201527f7468697320617070636861696e206973206e6f74207265676973746572656400604082015260600190565b60006001600160401b038816825260c0602083015261581160c0830188614fef565b82810360408401526158238188614fef565b905082810360608401526158378187614fef565b9050828103608084015261584b8186614f56565b9150508260a0830152979650505050505050565b60006001600160401b03808a16835260e0602084015261588260e084018a614fef565b8381036040850152615894818a614fef565b90508188166060850152861515608085015283810360a08501526158b88187614f56565b925050508260c083015298975050505050505050565b6040518181016001600160401b03811182821017156158ec57600080fd5b604052919050565b60006001600160401b03821115615909578081fd5b5060209081020190565b60006001600160401b03821115615928578081fd5b50601f01601f191660200190565b60005b83811015615951578181015183820152602001615939565b838111156137b45750506000910152565b6001600160a01b038116811461128257600080fdfea26469706673582212205e4e6171c9a337edb5232074b9b8bdb9026eee92aa67912d2d789eec279055ae64736f6c634300060c0033"

// DeployBroker deploys a new Ethereum contract, binding an instance of Broker to it.
func DeployBroker(auth *bind.TransactOpts, backend bind.ContractBackend, _bitxhubID string, _appchainID string, _validators []common.Address, _valThreshold uint64, _admins []common.Address, _adminThreshold uint64) (common.Address, *types.Transaction, *Broker, error) {
	parsed, err := abi.JSON(strings.NewReader(BrokerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BrokerBin), backend, _bitxhubID, _appchainID, _validators, _valThreshold, _admins, _adminThreshold)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Broker{BrokerCaller: BrokerCaller{contract: contract}, BrokerTransactor: BrokerTransactor{contract: contract}, BrokerFilterer: BrokerFilterer{contract: contract}}, nil
}

// Broker is an auto generated Go binding around an Ethereum contract.
type Broker struct {
	BrokerCaller     // Read-only binding to the contract
	BrokerTransactor // Write-only binding to the contract
	BrokerFilterer   // Log filterer for contract events
}

// BrokerCaller is an auto generated read-only Go binding around an Ethereum contract.
type BrokerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrokerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BrokerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrokerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BrokerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrokerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BrokerSession struct {
	Contract     *Broker           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BrokerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BrokerCallerSession struct {
	Contract *BrokerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BrokerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BrokerTransactorSession struct {
	Contract     *BrokerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BrokerRaw is an auto generated low-level Go binding around an Ethereum contract.
type BrokerRaw struct {
	Contract *Broker // Generic contract binding to access the raw methods on
}

// BrokerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BrokerCallerRaw struct {
	Contract *BrokerCaller // Generic read-only contract binding to access the raw methods on
}

// BrokerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BrokerTransactorRaw struct {
	Contract *BrokerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBroker creates a new instance of Broker, bound to a specific deployed contract.
func NewBroker(address common.Address, backend bind.ContractBackend) (*Broker, error) {
	contract, err := bindBroker(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Broker{BrokerCaller: BrokerCaller{contract: contract}, BrokerTransactor: BrokerTransactor{contract: contract}, BrokerFilterer: BrokerFilterer{contract: contract}}, nil
}

// NewBrokerCaller creates a new read-only instance of Broker, bound to a specific deployed contract.
func NewBrokerCaller(address common.Address, caller bind.ContractCaller) (*BrokerCaller, error) {
	contract, err := bindBroker(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BrokerCaller{contract: contract}, nil
}

// NewBrokerTransactor creates a new write-only instance of Broker, bound to a specific deployed contract.
func NewBrokerTransactor(address common.Address, transactor bind.ContractTransactor) (*BrokerTransactor, error) {
	contract, err := bindBroker(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BrokerTransactor{contract: contract}, nil
}

// NewBrokerFilterer creates a new log filterer instance of Broker, bound to a specific deployed contract.
func NewBrokerFilterer(address common.Address, filterer bind.ContractFilterer) (*BrokerFilterer, error) {
	contract, err := bindBroker(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BrokerFilterer{contract: contract}, nil
}

// bindBroker binds a generic wrapper to an already deployed contract.
func bindBroker(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BrokerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Broker *BrokerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Broker.Contract.BrokerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Broker *BrokerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Broker.Contract.BrokerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Broker *BrokerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Broker.Contract.BrokerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Broker *BrokerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Broker.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Broker *BrokerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Broker.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Broker *BrokerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Broker.Contract.contract.Transact(opts, method, params...)
}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address account) pure returns(string asciiString)
func (_Broker *BrokerCaller) AddressToString(opts *bind.CallOpts, account common.Address) (string, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "addressToString", account)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address account) pure returns(string asciiString)
func (_Broker *BrokerSession) AddressToString(account common.Address) (string, error) {
	return _Broker.Contract.AddressToString(&_Broker.CallOpts, account)
}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address account) pure returns(string asciiString)
func (_Broker *BrokerCallerSession) AddressToString(account common.Address) (string, error) {
	return _Broker.Contract.AddressToString(&_Broker.CallOpts, account)
}

// GenFullServiceID is a free data retrieval call binding the contract method 0x32358c6d.
//
// Solidity: function genFullServiceID(string serviceID) view returns(string)
func (_Broker *BrokerCaller) GenFullServiceID(opts *bind.CallOpts, serviceID string) (string, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "genFullServiceID", serviceID)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GenFullServiceID is a free data retrieval call binding the contract method 0x32358c6d.
//
// Solidity: function genFullServiceID(string serviceID) view returns(string)
func (_Broker *BrokerSession) GenFullServiceID(serviceID string) (string, error) {
	return _Broker.Contract.GenFullServiceID(&_Broker.CallOpts, serviceID)
}

// GenFullServiceID is a free data retrieval call binding the contract method 0x32358c6d.
//
// Solidity: function genFullServiceID(string serviceID) view returns(string)
func (_Broker *BrokerCallerSession) GenFullServiceID(serviceID string) (string, error) {
	return _Broker.Contract.GenFullServiceID(&_Broker.CallOpts, serviceID)
}

// GenRemoteFullServiceID is a free data retrieval call binding the contract method 0xc1606f17.
//
// Solidity: function genRemoteFullServiceID(string chainID, string serviceID) view returns(string)
func (_Broker *BrokerCaller) GenRemoteFullServiceID(opts *bind.CallOpts, chainID string, serviceID string) (string, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "genRemoteFullServiceID", chainID, serviceID)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GenRemoteFullServiceID is a free data retrieval call binding the contract method 0xc1606f17.
//
// Solidity: function genRemoteFullServiceID(string chainID, string serviceID) view returns(string)
func (_Broker *BrokerSession) GenRemoteFullServiceID(chainID string, serviceID string) (string, error) {
	return _Broker.Contract.GenRemoteFullServiceID(&_Broker.CallOpts, chainID, serviceID)
}

// GenRemoteFullServiceID is a free data retrieval call binding the contract method 0xc1606f17.
//
// Solidity: function genRemoteFullServiceID(string chainID, string serviceID) view returns(string)
func (_Broker *BrokerCallerSession) GenRemoteFullServiceID(chainID string, serviceID string) (string, error) {
	return _Broker.Contract.GenRemoteFullServiceID(&_Broker.CallOpts, chainID, serviceID)
}

// GetAppchainInfo is a free data retrieval call binding the contract method 0x32570a46.
//
// Solidity: function getAppchainInfo(string chainID) view returns(string, bytes, address)
func (_Broker *BrokerCaller) GetAppchainInfo(opts *bind.CallOpts, chainID string) (string, []byte, common.Address, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getAppchainInfo", chainID)

	if err != nil {
		return *new(string), *new([]byte), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	out2 := *abi.ConvertType(out[2], new(common.Address)).(*common.Address)

	return out0, out1, out2, err

}

// GetAppchainInfo is a free data retrieval call binding the contract method 0x32570a46.
//
// Solidity: function getAppchainInfo(string chainID) view returns(string, bytes, address)
func (_Broker *BrokerSession) GetAppchainInfo(chainID string) (string, []byte, common.Address, error) {
	return _Broker.Contract.GetAppchainInfo(&_Broker.CallOpts, chainID)
}

// GetAppchainInfo is a free data retrieval call binding the contract method 0x32570a46.
//
// Solidity: function getAppchainInfo(string chainID) view returns(string, bytes, address)
func (_Broker *BrokerCallerSession) GetAppchainInfo(chainID string) (string, []byte, common.Address, error) {
	return _Broker.Contract.GetAppchainInfo(&_Broker.CallOpts, chainID)
}

// GetCallbackMeta is a free data retrieval call binding the contract method 0x3b6bbe4a.
//
// Solidity: function getCallbackMeta() view returns(string[], uint64[])
func (_Broker *BrokerCaller) GetCallbackMeta(opts *bind.CallOpts) ([]string, []uint64, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getCallbackMeta")

	if err != nil {
		return *new([]string), *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	out1 := *abi.ConvertType(out[1], new([]uint64)).(*[]uint64)

	return out0, out1, err

}

// GetCallbackMeta is a free data retrieval call binding the contract method 0x3b6bbe4a.
//
// Solidity: function getCallbackMeta() view returns(string[], uint64[])
func (_Broker *BrokerSession) GetCallbackMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetCallbackMeta(&_Broker.CallOpts)
}

// GetCallbackMeta is a free data retrieval call binding the contract method 0x3b6bbe4a.
//
// Solidity: function getCallbackMeta() view returns(string[], uint64[])
func (_Broker *BrokerCallerSession) GetCallbackMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetCallbackMeta(&_Broker.CallOpts)
}

// GetChainID is a free data retrieval call binding the contract method 0x564b81ef.
//
// Solidity: function getChainID() view returns(string, string)
func (_Broker *BrokerCaller) GetChainID(opts *bind.CallOpts) (string, string, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getChainID")

	if err != nil {
		return *new(string), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetChainID is a free data retrieval call binding the contract method 0x564b81ef.
//
// Solidity: function getChainID() view returns(string, string)
func (_Broker *BrokerSession) GetChainID() (string, string, error) {
	return _Broker.Contract.GetChainID(&_Broker.CallOpts)
}

// GetChainID is a free data retrieval call binding the contract method 0x564b81ef.
//
// Solidity: function getChainID() view returns(string, string)
func (_Broker *BrokerCallerSession) GetChainID() (string, string, error) {
	return _Broker.Contract.GetChainID(&_Broker.CallOpts)
}

// GetDstRollbackMeta is a free data retrieval call binding the contract method 0xed63513f.
//
// Solidity: function getDstRollbackMeta() view returns(string[], uint64[])
func (_Broker *BrokerCaller) GetDstRollbackMeta(opts *bind.CallOpts) ([]string, []uint64, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getDstRollbackMeta")

	if err != nil {
		return *new([]string), *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	out1 := *abi.ConvertType(out[1], new([]uint64)).(*[]uint64)

	return out0, out1, err

}

// GetDstRollbackMeta is a free data retrieval call binding the contract method 0xed63513f.
//
// Solidity: function getDstRollbackMeta() view returns(string[], uint64[])
func (_Broker *BrokerSession) GetDstRollbackMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetDstRollbackMeta(&_Broker.CallOpts)
}

// GetDstRollbackMeta is a free data retrieval call binding the contract method 0xed63513f.
//
// Solidity: function getDstRollbackMeta() view returns(string[], uint64[])
func (_Broker *BrokerCallerSession) GetDstRollbackMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetDstRollbackMeta(&_Broker.CallOpts)
}

// GetInnerMeta is a free data retrieval call binding the contract method 0x67b9fa3b.
//
// Solidity: function getInnerMeta() view returns(string[], uint64[])
func (_Broker *BrokerCaller) GetInnerMeta(opts *bind.CallOpts) ([]string, []uint64, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getInnerMeta")

	if err != nil {
		return *new([]string), *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	out1 := *abi.ConvertType(out[1], new([]uint64)).(*[]uint64)

	return out0, out1, err

}

// GetInnerMeta is a free data retrieval call binding the contract method 0x67b9fa3b.
//
// Solidity: function getInnerMeta() view returns(string[], uint64[])
func (_Broker *BrokerSession) GetInnerMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetInnerMeta(&_Broker.CallOpts)
}

// GetInnerMeta is a free data retrieval call binding the contract method 0x67b9fa3b.
//
// Solidity: function getInnerMeta() view returns(string[], uint64[])
func (_Broker *BrokerCallerSession) GetInnerMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetInnerMeta(&_Broker.CallOpts)
}

// GetLocalServiceList is a free data retrieval call binding the contract method 0x34a55404.
//
// Solidity: function getLocalServiceList() view returns(string[])
func (_Broker *BrokerCaller) GetLocalServiceList(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getLocalServiceList")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLocalServiceList is a free data retrieval call binding the contract method 0x34a55404.
//
// Solidity: function getLocalServiceList() view returns(string[])
func (_Broker *BrokerSession) GetLocalServiceList() ([]string, error) {
	return _Broker.Contract.GetLocalServiceList(&_Broker.CallOpts)
}

// GetLocalServiceList is a free data retrieval call binding the contract method 0x34a55404.
//
// Solidity: function getLocalServiceList() view returns(string[])
func (_Broker *BrokerCallerSession) GetLocalServiceList() ([]string, error) {
	return _Broker.Contract.GetLocalServiceList(&_Broker.CallOpts)
}

// GetOutMessage is a free data retrieval call binding the contract method 0x29793e6e.
//
// Solidity: function getOutMessage(string outServicePair, uint64 idx) view returns(string, bytes[], bool)
func (_Broker *BrokerCaller) GetOutMessage(opts *bind.CallOpts, outServicePair string, idx uint64) (string, [][]byte, bool, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getOutMessage", outServicePair, idx)

	if err != nil {
		return *new(string), *new([][]byte), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new([][]byte)).(*[][]byte)
	out2 := *abi.ConvertType(out[2], new(bool)).(*bool)

	return out0, out1, out2, err

}

// GetOutMessage is a free data retrieval call binding the contract method 0x29793e6e.
//
// Solidity: function getOutMessage(string outServicePair, uint64 idx) view returns(string, bytes[], bool)
func (_Broker *BrokerSession) GetOutMessage(outServicePair string, idx uint64) (string, [][]byte, bool, error) {
	return _Broker.Contract.GetOutMessage(&_Broker.CallOpts, outServicePair, idx)
}

// GetOutMessage is a free data retrieval call binding the contract method 0x29793e6e.
//
// Solidity: function getOutMessage(string outServicePair, uint64 idx) view returns(string, bytes[], bool)
func (_Broker *BrokerCallerSession) GetOutMessage(outServicePair string, idx uint64) (string, [][]byte, bool, error) {
	return _Broker.Contract.GetOutMessage(&_Broker.CallOpts, outServicePair, idx)
}

// GetOuterMeta is a free data retrieval call binding the contract method 0xc20cab50.
//
// Solidity: function getOuterMeta() view returns(string[], uint64[])
func (_Broker *BrokerCaller) GetOuterMeta(opts *bind.CallOpts) ([]string, []uint64, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getOuterMeta")

	if err != nil {
		return *new([]string), *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	out1 := *abi.ConvertType(out[1], new([]uint64)).(*[]uint64)

	return out0, out1, err

}

// GetOuterMeta is a free data retrieval call binding the contract method 0xc20cab50.
//
// Solidity: function getOuterMeta() view returns(string[], uint64[])
func (_Broker *BrokerSession) GetOuterMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetOuterMeta(&_Broker.CallOpts)
}

// GetOuterMeta is a free data retrieval call binding the contract method 0xc20cab50.
//
// Solidity: function getOuterMeta() view returns(string[], uint64[])
func (_Broker *BrokerCallerSession) GetOuterMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetOuterMeta(&_Broker.CallOpts)
}

// GetReceiptMessage is a free data retrieval call binding the contract method 0xca6954da.
//
// Solidity: function getReceiptMessage(string inServicePair, uint64 idx) view returns(bytes[], uint64, bool)
func (_Broker *BrokerCaller) GetReceiptMessage(opts *bind.CallOpts, inServicePair string, idx uint64) ([][]byte, uint64, bool, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getReceiptMessage", inServicePair, idx)

	if err != nil {
		return *new([][]byte), *new(uint64), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)
	out1 := *abi.ConvertType(out[1], new(uint64)).(*uint64)
	out2 := *abi.ConvertType(out[2], new(bool)).(*bool)

	return out0, out1, out2, err

}

// GetReceiptMessage is a free data retrieval call binding the contract method 0xca6954da.
//
// Solidity: function getReceiptMessage(string inServicePair, uint64 idx) view returns(bytes[], uint64, bool)
func (_Broker *BrokerSession) GetReceiptMessage(inServicePair string, idx uint64) ([][]byte, uint64, bool, error) {
	return _Broker.Contract.GetReceiptMessage(&_Broker.CallOpts, inServicePair, idx)
}

// GetReceiptMessage is a free data retrieval call binding the contract method 0xca6954da.
//
// Solidity: function getReceiptMessage(string inServicePair, uint64 idx) view returns(bytes[], uint64, bool)
func (_Broker *BrokerCallerSession) GetReceiptMessage(inServicePair string, idx uint64) ([][]byte, uint64, bool, error) {
	return _Broker.Contract.GetReceiptMessage(&_Broker.CallOpts, inServicePair, idx)
}

// GetRemoteServiceList is a free data retrieval call binding the contract method 0xaed18cf1.
//
// Solidity: function getRemoteServiceList() view returns(string[])
func (_Broker *BrokerCaller) GetRemoteServiceList(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getRemoteServiceList")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetRemoteServiceList is a free data retrieval call binding the contract method 0xaed18cf1.
//
// Solidity: function getRemoteServiceList() view returns(string[])
func (_Broker *BrokerSession) GetRemoteServiceList() ([]string, error) {
	return _Broker.Contract.GetRemoteServiceList(&_Broker.CallOpts)
}

// GetRemoteServiceList is a free data retrieval call binding the contract method 0xaed18cf1.
//
// Solidity: function getRemoteServiceList() view returns(string[])
func (_Broker *BrokerCallerSession) GetRemoteServiceList() ([]string, error) {
	return _Broker.Contract.GetRemoteServiceList(&_Broker.CallOpts)
}

// Audit is a paid mutator transaction binding the contract method 0xb38ff85f.
//
// Solidity: function audit(address addr, int64 status) returns(bool)
func (_Broker *BrokerTransactor) Audit(opts *bind.TransactOpts, addr common.Address, status int64) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "audit", addr, status)
}

// Audit is a paid mutator transaction binding the contract method 0xb38ff85f.
//
// Solidity: function audit(address addr, int64 status) returns(bool)
func (_Broker *BrokerSession) Audit(addr common.Address, status int64) (*types.Transaction, error) {
	return _Broker.Contract.Audit(&_Broker.TransactOpts, addr, status)
}

// Audit is a paid mutator transaction binding the contract method 0xb38ff85f.
//
// Solidity: function audit(address addr, int64 status) returns(bool)
func (_Broker *BrokerTransactorSession) Audit(addr common.Address, status int64) (*types.Transaction, error) {
	return _Broker.Contract.Audit(&_Broker.TransactOpts, addr, status)
}

// EmitInterchainEvent is a paid mutator transaction binding the contract method 0xf4aa3077.
//
// Solidity: function emitInterchainEvent(string destFullServiceID, string funcCall, bytes[] args, string funcCb, bytes[] argsCb, string funcRb, bytes[] argsRb, bool isEncrypt) returns()
func (_Broker *BrokerTransactor) EmitInterchainEvent(opts *bind.TransactOpts, destFullServiceID string, funcCall string, args [][]byte, funcCb string, argsCb [][]byte, funcRb string, argsRb [][]byte, isEncrypt bool) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "emitInterchainEvent", destFullServiceID, funcCall, args, funcCb, argsCb, funcRb, argsRb, isEncrypt)
}

// EmitInterchainEvent is a paid mutator transaction binding the contract method 0xf4aa3077.
//
// Solidity: function emitInterchainEvent(string destFullServiceID, string funcCall, bytes[] args, string funcCb, bytes[] argsCb, string funcRb, bytes[] argsRb, bool isEncrypt) returns()
func (_Broker *BrokerSession) EmitInterchainEvent(destFullServiceID string, funcCall string, args [][]byte, funcCb string, argsCb [][]byte, funcRb string, argsRb [][]byte, isEncrypt bool) (*types.Transaction, error) {
	return _Broker.Contract.EmitInterchainEvent(&_Broker.TransactOpts, destFullServiceID, funcCall, args, funcCb, argsCb, funcRb, argsRb, isEncrypt)
}

// EmitInterchainEvent is a paid mutator transaction binding the contract method 0xf4aa3077.
//
// Solidity: function emitInterchainEvent(string destFullServiceID, string funcCall, bytes[] args, string funcCb, bytes[] argsCb, string funcRb, bytes[] argsRb, bool isEncrypt) returns()
func (_Broker *BrokerTransactorSession) EmitInterchainEvent(destFullServiceID string, funcCall string, args [][]byte, funcCb string, argsCb [][]byte, funcRb string, argsRb [][]byte, isEncrypt bool) (*types.Transaction, error) {
	return _Broker.Contract.EmitInterchainEvent(&_Broker.TransactOpts, destFullServiceID, funcCall, args, funcCb, argsCb, funcRb, argsRb, isEncrypt)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Broker *BrokerTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Broker *BrokerSession) Initialize() (*types.Transaction, error) {
	return _Broker.Contract.Initialize(&_Broker.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Broker *BrokerTransactorSession) Initialize() (*types.Transaction, error) {
	return _Broker.Contract.Initialize(&_Broker.TransactOpts)
}

// InvokeInterchain is a paid mutator transaction binding the contract method 0xa2f6aa32.
//
// Solidity: function invokeInterchain(string srcFullID, string destAddr, uint64 index, uint64 typ, string callFunc, bytes[] args, uint64 txStatus, bytes[] signatures, bool isEncrypt) payable returns()
func (_Broker *BrokerTransactor) InvokeInterchain(opts *bind.TransactOpts, srcFullID string, destAddr string, index uint64, typ uint64, callFunc string, args [][]byte, txStatus uint64, signatures [][]byte, isEncrypt bool) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "invokeInterchain", srcFullID, destAddr, index, typ, callFunc, args, txStatus, signatures, isEncrypt)
}

// InvokeInterchain is a paid mutator transaction binding the contract method 0xa2f6aa32.
//
// Solidity: function invokeInterchain(string srcFullID, string destAddr, uint64 index, uint64 typ, string callFunc, bytes[] args, uint64 txStatus, bytes[] signatures, bool isEncrypt) payable returns()
func (_Broker *BrokerSession) InvokeInterchain(srcFullID string, destAddr string, index uint64, typ uint64, callFunc string, args [][]byte, txStatus uint64, signatures [][]byte, isEncrypt bool) (*types.Transaction, error) {
	return _Broker.Contract.InvokeInterchain(&_Broker.TransactOpts, srcFullID, destAddr, index, typ, callFunc, args, txStatus, signatures, isEncrypt)
}

// InvokeInterchain is a paid mutator transaction binding the contract method 0xa2f6aa32.
//
// Solidity: function invokeInterchain(string srcFullID, string destAddr, uint64 index, uint64 typ, string callFunc, bytes[] args, uint64 txStatus, bytes[] signatures, bool isEncrypt) payable returns()
func (_Broker *BrokerTransactorSession) InvokeInterchain(srcFullID string, destAddr string, index uint64, typ uint64, callFunc string, args [][]byte, txStatus uint64, signatures [][]byte, isEncrypt bool) (*types.Transaction, error) {
	return _Broker.Contract.InvokeInterchain(&_Broker.TransactOpts, srcFullID, destAddr, index, typ, callFunc, args, txStatus, signatures, isEncrypt)
}

// InvokeReceipt is a paid mutator transaction binding the contract method 0xc4a250e3.
//
// Solidity: function invokeReceipt(string srcAddr, string dstFullID, uint64 index, uint64 typ, bytes[] result, uint64 txStatus, bytes[] signatures) payable returns()
func (_Broker *BrokerTransactor) InvokeReceipt(opts *bind.TransactOpts, srcAddr string, dstFullID string, index uint64, typ uint64, result [][]byte, txStatus uint64, signatures [][]byte) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "invokeReceipt", srcAddr, dstFullID, index, typ, result, txStatus, signatures)
}

// InvokeReceipt is a paid mutator transaction binding the contract method 0xc4a250e3.
//
// Solidity: function invokeReceipt(string srcAddr, string dstFullID, uint64 index, uint64 typ, bytes[] result, uint64 txStatus, bytes[] signatures) payable returns()
func (_Broker *BrokerSession) InvokeReceipt(srcAddr string, dstFullID string, index uint64, typ uint64, result [][]byte, txStatus uint64, signatures [][]byte) (*types.Transaction, error) {
	return _Broker.Contract.InvokeReceipt(&_Broker.TransactOpts, srcAddr, dstFullID, index, typ, result, txStatus, signatures)
}

// InvokeReceipt is a paid mutator transaction binding the contract method 0xc4a250e3.
//
// Solidity: function invokeReceipt(string srcAddr, string dstFullID, uint64 index, uint64 typ, bytes[] result, uint64 txStatus, bytes[] signatures) payable returns()
func (_Broker *BrokerTransactorSession) InvokeReceipt(srcAddr string, dstFullID string, index uint64, typ uint64, result [][]byte, txStatus uint64, signatures [][]byte) (*types.Transaction, error) {
	return _Broker.Contract.InvokeReceipt(&_Broker.TransactOpts, srcAddr, dstFullID, index, typ, result, txStatus, signatures)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address addr) returns()
func (_Broker *BrokerTransactor) Register(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "register", addr)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address addr) returns()
func (_Broker *BrokerSession) Register(addr common.Address) (*types.Transaction, error) {
	return _Broker.Contract.Register(&_Broker.TransactOpts, addr)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address addr) returns()
func (_Broker *BrokerTransactorSession) Register(addr common.Address) (*types.Transaction, error) {
	return _Broker.Contract.Register(&_Broker.TransactOpts, addr)
}

// RegisterAppchain is a paid mutator transaction binding the contract method 0x3cc412cd.
//
// Solidity: function registerAppchain(string chainID, string broker, address ruleAddr, bytes trustRoot) returns()
func (_Broker *BrokerTransactor) RegisterAppchain(opts *bind.TransactOpts, chainID string, broker string, ruleAddr common.Address, trustRoot []byte) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "registerAppchain", chainID, broker, ruleAddr, trustRoot)
}

// RegisterAppchain is a paid mutator transaction binding the contract method 0x3cc412cd.
//
// Solidity: function registerAppchain(string chainID, string broker, address ruleAddr, bytes trustRoot) returns()
func (_Broker *BrokerSession) RegisterAppchain(chainID string, broker string, ruleAddr common.Address, trustRoot []byte) (*types.Transaction, error) {
	return _Broker.Contract.RegisterAppchain(&_Broker.TransactOpts, chainID, broker, ruleAddr, trustRoot)
}

// RegisterAppchain is a paid mutator transaction binding the contract method 0x3cc412cd.
//
// Solidity: function registerAppchain(string chainID, string broker, address ruleAddr, bytes trustRoot) returns()
func (_Broker *BrokerTransactorSession) RegisterAppchain(chainID string, broker string, ruleAddr common.Address, trustRoot []byte) (*types.Transaction, error) {
	return _Broker.Contract.RegisterAppchain(&_Broker.TransactOpts, chainID, broker, ruleAddr, trustRoot)
}

// RegisterRemoteService is a paid mutator transaction binding the contract method 0x19bd2bb2.
//
// Solidity: function registerRemoteService(string chainID, string serviceID, address[] whiteList) returns()
func (_Broker *BrokerTransactor) RegisterRemoteService(opts *bind.TransactOpts, chainID string, serviceID string, whiteList []common.Address) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "registerRemoteService", chainID, serviceID, whiteList)
}

// RegisterRemoteService is a paid mutator transaction binding the contract method 0x19bd2bb2.
//
// Solidity: function registerRemoteService(string chainID, string serviceID, address[] whiteList) returns()
func (_Broker *BrokerSession) RegisterRemoteService(chainID string, serviceID string, whiteList []common.Address) (*types.Transaction, error) {
	return _Broker.Contract.RegisterRemoteService(&_Broker.TransactOpts, chainID, serviceID, whiteList)
}

// RegisterRemoteService is a paid mutator transaction binding the contract method 0x19bd2bb2.
//
// Solidity: function registerRemoteService(string chainID, string serviceID, address[] whiteList) returns()
func (_Broker *BrokerTransactorSession) RegisterRemoteService(chainID string, serviceID string, whiteList []common.Address) (*types.Transaction, error) {
	return _Broker.Contract.RegisterRemoteService(&_Broker.TransactOpts, chainID, serviceID, whiteList)
}

// BrokerThrowInterchainEventIterator is returned from FilterThrowInterchainEvent and is used to iterate over the raw logs and unpacked data for ThrowInterchainEvent events raised by the Broker contract.
type BrokerThrowInterchainEventIterator struct {
	Event *BrokerThrowInterchainEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrokerThrowInterchainEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrokerThrowInterchainEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrokerThrowInterchainEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrokerThrowInterchainEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrokerThrowInterchainEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrokerThrowInterchainEvent represents a ThrowInterchainEvent event raised by the Broker contract.
type BrokerThrowInterchainEvent struct {
	Index     uint64
	DstFullID string
	SrcFullID string
	Func      string
	Args      [][]byte
	Hash      [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterThrowInterchainEvent is a free log retrieval operation binding the contract event 0x709f2860ba85ce973413f9ae5240df255cb8abe488e609da35106f143e2cdb49.
//
// Solidity: event throwInterchainEvent(uint64 index, string dstFullID, string srcFullID, string func, bytes[] args, bytes32 hash)
func (_Broker *BrokerFilterer) FilterThrowInterchainEvent(opts *bind.FilterOpts) (*BrokerThrowInterchainEventIterator, error) {

	logs, sub, err := _Broker.contract.FilterLogs(opts, "throwInterchainEvent")
	if err != nil {
		return nil, err
	}
	return &BrokerThrowInterchainEventIterator{contract: _Broker.contract, event: "throwInterchainEvent", logs: logs, sub: sub}, nil
}

// WatchThrowInterchainEvent is a free log subscription operation binding the contract event 0x709f2860ba85ce973413f9ae5240df255cb8abe488e609da35106f143e2cdb49.
//
// Solidity: event throwInterchainEvent(uint64 index, string dstFullID, string srcFullID, string func, bytes[] args, bytes32 hash)
func (_Broker *BrokerFilterer) WatchThrowInterchainEvent(opts *bind.WatchOpts, sink chan<- *BrokerThrowInterchainEvent) (event.Subscription, error) {

	logs, sub, err := _Broker.contract.WatchLogs(opts, "throwInterchainEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrokerThrowInterchainEvent)
				if err := _Broker.contract.UnpackLog(event, "throwInterchainEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseThrowInterchainEvent is a log parse operation binding the contract event 0x709f2860ba85ce973413f9ae5240df255cb8abe488e609da35106f143e2cdb49.
//
// Solidity: event throwInterchainEvent(uint64 index, string dstFullID, string srcFullID, string func, bytes[] args, bytes32 hash)
func (_Broker *BrokerFilterer) ParseThrowInterchainEvent(log types.Log) (*BrokerThrowInterchainEvent, error) {
	event := new(BrokerThrowInterchainEvent)
	if err := _Broker.contract.UnpackLog(event, "throwInterchainEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrokerThrowReceiptEventIterator is returned from FilterThrowReceiptEvent and is used to iterate over the raw logs and unpacked data for ThrowReceiptEvent events raised by the Broker contract.
type BrokerThrowReceiptEventIterator struct {
	Event *BrokerThrowReceiptEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrokerThrowReceiptEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrokerThrowReceiptEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrokerThrowReceiptEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrokerThrowReceiptEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrokerThrowReceiptEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrokerThrowReceiptEvent represents a ThrowReceiptEvent event raised by the Broker contract.
type BrokerThrowReceiptEvent struct {
	Index     uint64
	DstFullID string
	SrcFullID string
	Typ       uint64
	Status    bool
	Result    [][]byte
	Hash      [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterThrowReceiptEvent is a free log retrieval operation binding the contract event 0xb937bccf7e091ff2fcaca3d0c1b630690aef46162e500478b6709ce9732042e5.
//
// Solidity: event throwReceiptEvent(uint64 index, string dstFullID, string srcFullID, uint64 typ, bool status, bytes[] result, bytes32 hash)
func (_Broker *BrokerFilterer) FilterThrowReceiptEvent(opts *bind.FilterOpts) (*BrokerThrowReceiptEventIterator, error) {

	logs, sub, err := _Broker.contract.FilterLogs(opts, "throwReceiptEvent")
	if err != nil {
		return nil, err
	}
	return &BrokerThrowReceiptEventIterator{contract: _Broker.contract, event: "throwReceiptEvent", logs: logs, sub: sub}, nil
}

// WatchThrowReceiptEvent is a free log subscription operation binding the contract event 0xb937bccf7e091ff2fcaca3d0c1b630690aef46162e500478b6709ce9732042e5.
//
// Solidity: event throwReceiptEvent(uint64 index, string dstFullID, string srcFullID, uint64 typ, bool status, bytes[] result, bytes32 hash)
func (_Broker *BrokerFilterer) WatchThrowReceiptEvent(opts *bind.WatchOpts, sink chan<- *BrokerThrowReceiptEvent) (event.Subscription, error) {

	logs, sub, err := _Broker.contract.WatchLogs(opts, "throwReceiptEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrokerThrowReceiptEvent)
				if err := _Broker.contract.UnpackLog(event, "throwReceiptEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseThrowReceiptEvent is a log parse operation binding the contract event 0xb937bccf7e091ff2fcaca3d0c1b630690aef46162e500478b6709ce9732042e5.
//
// Solidity: event throwReceiptEvent(uint64 index, string dstFullID, string srcFullID, uint64 typ, bool status, bytes[] result, bytes32 hash)
func (_Broker *BrokerFilterer) ParseThrowReceiptEvent(log types.Log) (*BrokerThrowReceiptEvent, error) {
	event := new(BrokerThrowReceiptEvent)
	if err := _Broker.contract.UnpackLog(event, "throwReceiptEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrokerThrowReceiptStatusIterator is returned from FilterThrowReceiptStatus and is used to iterate over the raw logs and unpacked data for ThrowReceiptStatus events raised by the Broker contract.
type BrokerThrowReceiptStatusIterator struct {
	Event *BrokerThrowReceiptStatus // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrokerThrowReceiptStatusIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrokerThrowReceiptStatus)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrokerThrowReceiptStatus)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrokerThrowReceiptStatusIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrokerThrowReceiptStatusIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrokerThrowReceiptStatus represents a ThrowReceiptStatus event raised by the Broker contract.
type BrokerThrowReceiptStatus struct {
	Arg0 bool
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterThrowReceiptStatus is a free log retrieval operation binding the contract event 0xdadb08102ef1bab9720995485cebd09625dc443d3e2b5b9577b37a24de97beae.
//
// Solidity: event throwReceiptStatus(bool arg0)
func (_Broker *BrokerFilterer) FilterThrowReceiptStatus(opts *bind.FilterOpts) (*BrokerThrowReceiptStatusIterator, error) {

	logs, sub, err := _Broker.contract.FilterLogs(opts, "throwReceiptStatus")
	if err != nil {
		return nil, err
	}
	return &BrokerThrowReceiptStatusIterator{contract: _Broker.contract, event: "throwReceiptStatus", logs: logs, sub: sub}, nil
}

// WatchThrowReceiptStatus is a free log subscription operation binding the contract event 0xdadb08102ef1bab9720995485cebd09625dc443d3e2b5b9577b37a24de97beae.
//
// Solidity: event throwReceiptStatus(bool arg0)
func (_Broker *BrokerFilterer) WatchThrowReceiptStatus(opts *bind.WatchOpts, sink chan<- *BrokerThrowReceiptStatus) (event.Subscription, error) {

	logs, sub, err := _Broker.contract.WatchLogs(opts, "throwReceiptStatus")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrokerThrowReceiptStatus)
				if err := _Broker.contract.UnpackLog(event, "throwReceiptStatus", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseThrowReceiptStatus is a log parse operation binding the contract event 0xdadb08102ef1bab9720995485cebd09625dc443d3e2b5b9577b37a24de97beae.
//
// Solidity: event throwReceiptStatus(bool arg0)
func (_Broker *BrokerFilterer) ParseThrowReceiptStatus(log types.Log) (*BrokerThrowReceiptStatus, error) {
	event := new(BrokerThrowReceiptStatus)
	if err := _Broker.contract.UnpackLog(event, "throwReceiptStatus", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
