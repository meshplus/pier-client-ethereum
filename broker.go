// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package main

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BrokerABI is the input ABI used to generate the binding from.
const BrokerABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bitxhubID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_appchainID\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint64\",\"name\":\"_valThreshold\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"},{\"internalType\":\"uint64\",\"name\":\"_adminThreshold\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dstFullID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"srcFullID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"args\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"throwInterchainEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dstFullID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"srcFullID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"result\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"throwReceiptEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"asciiString\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"int64\",\"name\":\"status\",\"type\":\"int64\"}],\"name\":\"audit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destFullServiceID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"funcCall\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"args\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"funcCb\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"argsCb\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"funcRb\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"argsRb\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"isEncrypt\",\"type\":\"bool\"}],\"name\":\"emitInterchainEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"serviceID\",\"type\":\"string\"}],\"name\":\"genFullServiceID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallbackMeta\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDstRollbackMeta\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInnerMeta\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLocalServiceList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"outServicePair\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"idx\",\"type\":\"uint64\"}],\"name\":\"getOutMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOuterMeta\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"inServicePair\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"idx\",\"type\":\"uint64\"}],\"name\":\"getReceiptMessage\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemoteServiceList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"srcFullID\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"typ\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"callFunc\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"args\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64\",\"name\":\"txStatus\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"isEncrypt\",\"type\":\"bool\"}],\"name\":\"invokeInterchain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dstFullID\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"typ\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"result\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64\",\"name\":\"txStatus\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"invokeReceipt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"serviceID\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"banList\",\"type\":\"address[]\"}],\"name\":\"registerCounterParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BrokerFuncSigs maps the 4-byte function signature to its string representation.
var BrokerFuncSigs = map[string]string{
	"5e57966d": "addressToString(address)",
	"b38ff85f": "audit(address,int64)",
	"f4aa3077": "emitInterchainEvent(string,string,bytes[],string,bytes[],string,bytes[],bool)",
	"32358c6d": "genFullServiceID(string)",
	"3b6bbe4a": "getCallbackMeta()",
	"564b81ef": "getChainID()",
	"ed63513f": "getDstRollbackMeta()",
	"67b9fa3b": "getInnerMeta()",
	"34a55404": "getLocalServiceList()",
	"29793e6e": "getOutMessage(string,uint64)",
	"c20cab50": "getOuterMeta()",
	"ca6954da": "getReceiptMessage(string,uint64)",
	"aed18cf1": "getRemoteServiceList()",
	"8129fc1c": "initialize()",
	"d128dc05": "invokeInterchain(string,address,uint64,uint64,string,bytes[],uint64,bytes[],bool)",
	"69b2f0f5": "invokeReceipt(address,string,uint64,uint64,bytes[],uint64,bytes[])",
	"4420e486": "register(address)",
	"3b34aa94": "registerCounterParty(string,address[])",
}

// BrokerBin is the compiled bytecode used for deploying new contracts.
var BrokerBin = "0x60806040523480156200001157600080fd5b50604051620050ea380380620050ea83398101604081905262000034916200034d565b855162000049906006906020890190620000d3565b5084516200005f906007906020880190620000d3565b5083516200007590600890602087019062000158565b50600980546001600160401b0319166001600160401b0385161790558151620000a690600a90602085019062000158565b50600b80546001600160401b0319166001600160401b0392909216919091179055506200044e9350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011657805160ff191683800117855562000146565b8280016001018555821562000146579182015b828111156200014657825182559160200191906001019062000129565b5062000154929150620001be565b5090565b828054828255906000526020600020908101928215620001b0579160200282015b82811115620001b057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000179565b5062000154929150620001de565b620001db91905b80821115620001545760008155600101620001c5565b90565b620001db91905b80821115620001545780546001600160a01b0319168155600101620001e5565b600082601f83011262000216578081fd5b81516001600160401b038111156200022c578182fd5b60208082026200023e82820162000427565b838152935081840185830182870184018810156200025b57600080fd5b60009250825b85811015620002945781516001600160a01b038116811462000281578485fd5b8352918401919084019060010162000261565b50505050505092915050565b600082601f830112620002b1578081fd5b81516001600160401b03811115620002c7578182fd5b6020620002dd601f8301601f1916820162000427565b92508183528481838601011115620002f457600080fd5b60005b8281101562000314578481018201518482018301528101620002f7565b82811115620003265760008284860101525b50505092915050565b80516001600160401b03811681146200034757600080fd5b92915050565b60008060008060008060c0878903121562000366578182fd5b86516001600160401b03808211156200037d578384fd5b6200038b8a838b01620002a0565b97506020890151915080821115620003a1578384fd5b620003af8a838b01620002a0565b96506040890151915080821115620003c5578384fd5b620003d38a838b0162000205565b9550620003e48a60608b016200032f565b94506080890151915080821115620003fa578384fd5b506200040989828a0162000205565b9250506200041b8860a089016200032f565b90509295509295509295565b6040518181016001600160401b03811182821017156200044657600080fd5b604052919050565b614c8c806200045e6000396000f3fe6080604052600436106101095760003560e01c806369b2f0f511610095578063c20cab5011610064578063c20cab50146102bc578063ca6954da146102d1578063d128dc0514610300578063ed63513f14610313578063f4aa30771461032857610109565b806369b2f0f5146102525780638129fc1c14610265578063aed18cf11461027a578063b38ff85f1461028f57610109565b80633b6bbe4a116100dc5780633b6bbe4a146101b75780634420e486146101da578063564b81ef146101fa5780635e57966d1461021d57806367b9fa3b1461023d57610109565b806329793e6e1461010e57806332358c6d1461014657806334a55404146101735780633b34aa9414610195575b600080fd5b34801561011a57600080fd5b5061012e6101293660046142bf565b610348565b60405161013d93929190614777565b60405180910390f35b34801561015257600080fd5b50610166610161366004613fa1565b610828565b60405161013d9190614764565b34801561017f57600080fd5b50610188610857565b60405161013d91906146c9565b3480156101a157600080fd5b506101b56101b03660046140db565b61090b565b005b3480156101c357600080fd5b506101cc6109f7565b60405161013d9291906146dc565b3480156101e657600080fd5b506101b56101f5366004613db1565b610bb4565b34801561020657600080fd5b5061020f610cff565b60405161013d9291906147af565b34801561022957600080fd5b50610166610238366004613db1565b610e2e565b34801561024957600080fd5b506101cc610f89565b6101b5610260366004613e11565b611123565b34801561027157600080fd5b506101b56117ee565b34801561028657600080fd5b50610188611af1565b34801561029b57600080fd5b506102af6102aa366004613dd3565b611bc9565b60405161013d919061473b565b3480156102c857600080fd5b506101cc611e0c565b3480156102dd57600080fd5b506102f16102ec3660046142bf565b611fba565b60405161013d9392919061469f565b6101b561030e366004613fdb565b61210b565b34801561031f57600080fd5b506101cc612347565b34801561033457600080fd5b506101b561034336600461419b565b6124e1565b60608060006103556139c6565b601486604051610365919061444a565b9081526040805191829003602090810183206001600160401b0389166000908152908252829020608084018352805460ff16151584528251600180830180546060601f60026000199584161561010002959095019092169390930490810186900486028401830187529583018681529395948701949293909284928491908401828280156104345780601f1061040957610100808354040283529160200191610434565b820191906000526020600020905b81548152906001019060200180831161041757829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b8282101561050d5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156104f95780601f106104ce576101008083540402835291602001916104f9565b820191906000526020600020905b8154815290600101906020018083116104dc57829003601f168201915b505050505081526020019060010190610462565b5050509152505081526040805160038401805460606020601f60026000196101006001871615020190941693909304928301819004810285018201865294840182815294909501949293919284929184918401828280156105af5780601f10610584576101008083540402835291602001916105af565b820191906000526020600020905b81548152906001019060200180831161059257829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156106885760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156106745780601f1061064957610100808354040283529160200191610674565b820191906000526020600020905b81548152906001019060200180831161065757829003601f168201915b5050505050815260200190600101906105dd565b5050509152505081526040805160058401805460606020601f600260001961010060018716150201909416939093049283018190048102850182018652948401828152949095019492939192849291849184018282801561072a5780601f106106ff5761010080835404028352916020019161072a565b820191906000526020600020905b81548152906001019060200180831161070d57829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156108035760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156107ef5780601f106107c4576101008083540402835291602001916107ef565b820191906000526020600020905b8154815290600101906020018083116107d257829003601f168201915b505050505081526020019060010190610758565b5050509152505090525060208181015180519101519151909891975095509350505050565b60606006600783604051602001610841939291906145f5565b6040516020818303038152906040529050919050565b60015460609081906001600160401b038111801561087457600080fd5b506040519080825280602002602001820160405280156108a857816020015b60608152602001906001900390816108935790505b50905060005b600154811015610904576108e5610161600183815481106108cb57fe5b6000918252602090912001546001600160a01b0316610e2e565b8282815181106108f157fe5b60209081029190910101526001016108ae565b5090505b90565b6000805b600a5481101561094f57600a818154811061092657fe5b6000918252602090912001546001600160a01b031633141561094757600191505b60010161090f565b5060018115151461097b5760405162461bcd60e51b8152600401610972906148de565b60405180910390fd5b8160048460405161098c919061444a565b908152602001604051809103902090805190602001906109ad929190613a01565b506005805460018101825560009190915283516109f1917f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001906020860190613a66565b50505050565b6060806060600f805490506001600160401b0381118015610a1757600080fd5b50604051908082528060200260200182016040528015610a41578160200160208202803683370190505b50905060005b600f546001600160401b0382161015610ad5576011600f826001600160401b031681548110610a7257fe5b90600052602060002001604051610a8991906145e9565b9081526040519081900360200190205482516001600160401b03918216918491908416908110610ab557fe5b6001600160401b0390921660209283029190910190910152600101610a47565b50600f8181805480602002602001604051908101604052809291908181526020016000905b82821015610ba55760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610b915780601f10610b6657610100808354040283529160200191610b91565b820191906000526020600020905b815481529060010190602001808311610b7457829003601f168201915b505050505081526020019060010190610afa565b50505050915092509250509091565b6001600160a01b03811660009081526020819052604090205460ff1680610bf757506001600160a01b0381166000908152600260208190526040909120015460ff165b15610c0157610cfc565b600a546060906001600160401b0381118015610c1c57600080fd5b50604051908082528060200260200182016040528015610c46578160200160208202803683370190505b5060408051608081018252600080825260208083018281528385018681526001606086018190526001600160a01b038a168552600284529590932084518154925167ffffffffffffffff199093166001600160401b03918216176fffffffffffffffff00000000000000001916600160401b91909316029190911781559151805195965092949193610cde9390850192910190613a01565b50606091909101516002909101805460ff1916911515919091179055505b50565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609384939092600792918491830182828015610d915780601f10610d6657610100808354040283529160200191610d91565b820191906000526020600020905b815481529060010190602001808311610d7457829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295975086945092508401905082828015610e1f5780601f10610df457610100808354040283529160200191610e1f565b820191906000526020600020905b815481529060010190602001808311610e0257829003601f168201915b50505050509050915091509091565b604080516028808252606082810190935283831b918391602082018180368337019050509050600080600080600080610e65613ae0565b610e6e8b612899565b905060005b6014811015610f58578060130360080260020a8a60601c6001600160a01b031681610e9a57fe5b049750601060ff89160496508660100288039550818160020260288110610ebd57fe5b60200201519450818160020260010160288110610ed657fe5b60200201519350610ee787866129ce565b925082870160f81b898260020281518110610efe57fe5b60200101906001600160f81b031916908160001a905350610f1f86856129ce565b925082860160f81b898260020260010181518110610f3957fe5b60200101906001600160f81b031916908160001a905350600101610e73565b5087604051602001610f6a919061463e565b6040516020818303038152906040529950505050505050505050919050565b6060806060600e805490506001600160401b0381118015610fa957600080fd5b50604051908082528060200260200182016040528015610fd3578160200160208202803683370190505b50905060005b600e54811015611053576012600e8281548110610ff257fe5b9060005260206000200160405161100991906145e9565b9081526040519081900360200190205482516001600160401b039091169083908390811061103357fe5b6001600160401b0390921660209283029190910190910152600101610fd9565b50600e8181805480602002602001604051908101604052809291908181526020016000905b82821015610ba55760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561110f5780601f106110e45761010080835404028352916020019161110f565b820191906000526020600020905b8154815290600101906020018083116110f257829003601f168201915b505050505081526020019060010190611078565b606061113161016189610e2e565b60085490915060009061119657856001600160401b03166001148061115f5750856001600160401b03166002145b61117b5760405162461bcd60e51b81526004016109729061499e565b856001600160401b031660021415611191575060015b61124b565b856001600160401b0316600114806111b75750856001600160401b03166002145b80156111df5750836001600160401b0316600114806111df5750836001600160401b03166002145b8061120557506001600160401b0386161580156112055750836001600160401b03166003145b6112215760405162461bcd60e51b815260040161097290614856565b836001600160401b0316600214806112425750836001600160401b03166003145b1561124b575060015b61125882898960016129fc565b61126782898989898989612b2f565b6060611273838a612e80565b905061127d613aff565b60148260405161128d919061444a565b90815260408051602092819003830181206001600160401b038d166000908152908452829020600301805460026001821615610100026000190190911604601f810185900490940282016060908101845292820184815291939092849291849184018282801561133e5780601f106113135761010080835404028352916020019161133e565b820191906000526020600020905b81548152906001019060200180831161132157829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156114175760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156114035780601f106113d857610100808354040283529160200191611403565b820191906000526020600020905b8154815290600101906020018083116113e657829003601f168201915b50505050508152602001906001019061136c565b50505091525050602081015190915083156116b55760148360405161143c919061444a565b90815260408051602092819003830181206001600160401b038e166000908152908452829020600501805460026001821615610100026000190190911604601f81018590049094028201606090810184529282018481529193909284929184918401828280156114ed5780601f106114c2576101008083540402835291602001916114ed565b820191906000526020600020905b8154815290600101906020018083116114d057829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156115c65760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156115b25780601f10611587576101008083540402835291602001916115b2565b820191906000526020600020905b81548152906001019060200180831161159557829003601f168201915b50505050508152602001906001019061151b565b505050508152505091508751826020015151016001600160401b03811180156115ee57600080fd5b5060405190808252806020026020018201604052801561162257816020015b606081526020019060019003908161160d5790505b50905060005b82602001515181101561166c578260200151818151811061164557fe5b602002602001015182828151811061165957fe5b6020908102919091010152600101611628565b5060005b88518110156116b35788818151811061168557fe5b6020026020010151828285602001515101815181106116a057fe5b6020908102919091010152600101611670565b505b6040516020016116c490610908565b60408051601f19818403018152908290528051602091820120845190926116eb920161444a565b60405160208183030381529060405280519060200120146117e057815160405160609161171a9160200161454d565b60405160208183030381529060405290508c6001600160a01b031681836040516024016117479190614668565b60408051601f1981840301815290829052916117629161444a565b60408051918290039091206020830180516001600160e01b03166001600160e01b031990921691909117905251611799919061444a565b6000604051808303816000865af19150503d80600081146117d6576040519150601f19603f3d011682016040523d82523d6000602084013e6117db565b606091505b505050505b505050505050505050505050565b60005b600e5481101561185b5760006012600e838154811061180c57fe5b9060005260206000200160405161182391906145e9565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff199092169190911790556001016117f1565b5060005b600d548110156118c95760006010600d838154811061187a57fe5b9060005260206000200160405161189191906145e9565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff1990921691909117905560010161185f565b5060005b600f548110156119375760006011600f83815481106118e857fe5b906000526020600020016040516118ff91906145e9565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff199092169190911790556001016118cd565b5060005b600e548110156119a55760006013600e838154811061195657fe5b9060005260206000200160405161196d91906145e9565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff1990921691909117905560010161193b565b5060005b600154811015611a01576000806000600184815481106119c557fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790556001016119a9565b5060005b600554811015611a5757600460058281548110611a1e57fe5b90600052602060002001604051611a3591906145e9565b90815260200160405180910390206000611a4f9190613b19565b600101611a05565b5060005b600354811015611aca576002600060038381548110611a7657fe5b60009182526020808320909101546001600160a01b03168352820192909252604001812080546001600160801b031916815590611ab66001830182613b19565b50600201805460ff19169055600101611a5b565b50611ad7600d6000613b37565b611ae3600e6000613b37565b611aef600f6000613b37565b565b60606005805480602002602001604051908101604052809291908181526020016000905b82821015611bc05760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611bac5780601f10611b8157610100808354040283529160200191611bac565b820191906000526020600020905b815481529060010190602001808311611b8f57829003601f168201915b505050505081526020019060010190611b15565b50505050905090565b600080805b600a54811015611c0e57600a8181548110611be557fe5b6000918252602090912001546001600160a01b0316331415611c0657600191505b600101611bce565b50600181151514611c315760405162461bcd60e51b8152600401610972906148de565b611c39613b55565b6001600160a01b038516600090815260026020908152604091829020825160808101845281546001600160401b038082168352600160401b909104168184015260018201805485518186028101860187528181529295939493860193830182828015611cce57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611cb0575b50505091835250506002919091015460ff16151560209091015290506000611cf68286612eac565b905080611d0857600093505050611e05565b8060011415611dbd576001600160a01b038616600090815260026020526040812080546001600160801b031916815590611d456001830182613b19565b50600201805460ff199081169091556001600160a01b038716600081815260208190526040812080549093166001908117909355825480840184559290527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690910180546001600160a01b0319169091179055611dfe565b6001600160a01b038616600090815260026020526040812080546001600160801b031916815590611df16001830182613b19565b50600201805460ff191690555b6001935050505b5092915050565b6060806060600d805490506001600160401b0381118015611e2c57600080fd5b50604051908082528060200260200182016040528015611e56578160200160208202803683370190505b50905060005b600d546001600160401b0382161015611eea576010600d826001600160401b031681548110611e8757fe5b90600052602060002001604051611e9e91906145e9565b9081526040519081900360200190205482516001600160401b03918216918491908416908110611eca57fe5b6001600160401b0390921660209283029190910190910152600101611e5c565b50600d8181805480602002602001604051908101604052809291908181526020016000905b82821015610ba55760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611fa65780601f10611f7b57610100808354040283529160200191611fa6565b820191906000526020600020905b815481529060010190602001808311611f8957829003601f168201915b505050505081526020019060010190611f0f565b6060600080611fc7613b7d565b601586604051611fd7919061444a565b9081526040805191829003602090810183206001600160401b0389166000908152908252828120606085018452805460ff8082161515875261010090910416151585840152600181018054855181860281018601875281815292958701949293919290919084015b828210156120ea5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156120d65780601f106120ab576101008083540402835291602001916120d6565b820191906000526020600020905b8154815290600101906020018083116120b957829003601f168201915b50505050508152602001906001019061203f565b50505091525050604081015160208201519151909891975095509350505050565b6000606061211b6101618b610e2e565b90506001600160401b03881615801561213b57506001600160401b038516155b156121525761214d8b828b60006129fc565b6121c6565b6001600160401b0388161580156121725750846001600160401b03166002145b8061219857506001600160401b0388161580156121985750846001600160401b03166003145b156121ae576001915061214d8b828b60026129fc565b60405162461bcd60e51b815260040161097290614a9a565b6121d08b8b613019565b6121e08b828b8b8b8b8b8b6131fa565b600060606121f08c8a8a87613315565b9150915060405180606001604052808615158152602001831515815260200182815250601561221f8f86612e80565b60405161222c919061444a565b90815260408051602092819003830190206001600160401b038f166000908152908352819020835181548585015160ff199091169115159190911761ff00191661010091151591909102178155908301518051919261229392600185019290910190613b9c565b5090505084156122ee575060607fb4dfde3e6cb30bf8f03d620d311b1dba8c953ee5083316166bf74e7b67f3b1828b848f85856122cf81613477565b6040516122e196959493929190614adb565b60405180910390a1612338565b7fb4dfde3e6cb30bf8f03d620d311b1dba8c953ee5083316166bf74e7b67f3b1828b848f858561231d87613477565b60405161232f96959493929190614adb565b60405180910390a15b50505050505050505050505050565b6060806060600e805490506001600160401b038111801561236757600080fd5b50604051908082528060200260200182016040528015612391578160200160208202803683370190505b50905060005b600e54811015612411576013600e82815481106123b057fe5b906000526020600020016040516123c791906145e9565b9081526040519081900360200190205482516001600160401b03909116908390839081106123f157fe5b6001600160401b0390921660209283029190910190910152600101612397565b50600e8181805480602002602001604051908101604052809291908181526020016000905b82821015610ba55760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156124cd5780601f106124a2576101008083540402835291602001916124cd565b820191906000526020600020905b8154815290600101906020018083116124b057829003601f168201915b505050505081526020019060010190612436565b3360009081526020819052604090205460ff1615156001146125155760405162461bcd60e51b8152600401610972906147dd565b606061252361016133610e2e565b90506060612531828b612e80565b9050601081604051612543919061444a565b90815260405190819003602001812080546001600160401b038082166001011667ffffffffffffffff1990911617905560109061258190839061444a565b908152604051908190036020019020546001600160401b0316600114156125e757600d805460018101825560009190915281516125e5917fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501906020840190613a66565b505b6040518060800160405280841515815260200160405180604001604052808c81526020018b815250815260200160405180604001604052808a8152602001898152508152602001604051806040016040528088815260200187815250815250601482604051612656919061444a565b90815260200160405180910390206000601084604051612676919061444a565b9081526040805160209281900383019020546001600160401b031683528282019390935291016000208251815460ff191690151517815582820151805180519293919260018501926126cc928492910190613a66565b5060208281015180516126e59260018501920190613b9c565b505050604082015180518051600384019161270591839160200190613a66565b50602082810151805161271e9260018501920190613b9c565b505050606082015180518051600584019161273e91839160200190613a66565b5060208281015180516127579260018501920190613b9c565b505050905050606089604051602001612770919061444a565b60408051601f19818403018152919052905060005b89518110156127ce57818a828151811061279b57fe5b60200260200101516040516020016127b492919061449a565b60408051601f198184030181529190529150600101612785565b5080516020820120841561281957604080516020808201835260008083528351818152918201909352909c5090612815565b60608152602001906001900390816128005790505b5099505b7f709f2860ba85ce973413f9ae5240df255cb8abe488e609da35106f143e2cdb4960108460405161284a919061444a565b908152602001604051809103902060009054906101000a90046001600160401b03168d868e8e8660405161288396959493929190614b3e565b60405180910390a1505050505050505050505050565b6128a1613ae0565b606082901b60006128b1826134d5565b6040516020016128c1919061444a565b60405160208183030381529060405280519060200120905060008060008060005b60148110156129c25760108782601481106128f957fe5b1a8161290157fe5b06935060108488836014811061291357fe5b1a0360ff168161291f57fe5b049450601086826020811061293057fe5b1a8161293857fe5b06915060108287836020811061294a57fe5b1a0360ff168161295657fe5b04925060098560ff1611801561296f575060078360ff16115b88826002026028811061297e57fe5b91151560209092020152600960ff851611801561299e575060078260ff16115b8882600202600101602881106129b057fe5b911515602090920201526001016128e2565b50505050505050919050565b6000600a8360ff1610156129e4575060306129f6565b81156129f2575060376129f6565b5060575b92915050565b6060612a088585612e80565b90506001600160401b038216612a6957826001600160401b0316601282604051612a32919061444a565b908152604051908190036020019020546001600160401b039081166001011614612a5b57600080fd5b612a64816135cf565b612b28565b816001600160401b031660011415612ac857826001600160401b0316601182604051612a95919061444a565b908152604051908190036020019020546001600160401b039081166001011614612abe57600080fd5b612a648184613681565b816001600160401b031660021415612b2857826001600160401b0316601382604051612af4919061444a565b908152604051908190036020019020546001600160401b03908116600101161115612b1e57600080fd5b612b288184613738565b5050505050565b600b546001600160401b0316612b4457612e77565b606087878787604051602001612b5d94939291906144fa565b6040516020818303038152906040529050846001600160401b03166000148015612b905750826001600160401b03166003145b15612dd3576060612ba18989612e80565b9050612bab613aff565b601482604051612bbb919061444a565b90815260408051602092819003830181206001600160401b038c1660009081529084528290206001908101805460029281161561010002600019011691909104601f8101859004909402820160609081018452928201848152919390928492918491840182828015612c6e5780601f10612c4357610100808354040283529160200191612c6e565b820191906000526020600020905b815481529060010190602001808311612c5157829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015612d475760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015612d335780601f10612d0857610100808354040283529160200191612d33565b820191906000526020600020905b815481529060010190602001808311612d1657829003601f168201915b505050505081526020019060010190612c9c565b505050915250508051604051919250612d659185919060200161449a565b60408051601f19818403018152919052925060005b816020015151811015612dcb578382602001518281518110612d9857fe5b6020026020010151604051602001612db192919061449a565b60408051601f198184030181529190529350600101612d7a565b505050612e21565b60005b8451811015612e1f5781858281518110612dec57fe5b6020026020010151604051602001612e0592919061449a565b60408051601f198184030181529190529150600101612dd6565b505b8083604051602001612e349291906144c8565b60408051601f1981840301815291905280516020820120909150612e588184613749565b612e745760405162461bcd60e51b815260040161097290614915565b50505b50505050505050565b60608282604051602001612e959291906145ac565b604051602081830303815290604052905092915050565b60008260600151612ecf5760405162461bcd60e51b8152600401610972906149e5565b8160070b60001480612ee457508160070b6001145b612f005760405162461bcd60e51b815260040161097290614a63565b60005b836040015151811015612f6157336001600160a01b031684604001518281518110612f2a57fe5b60200260200101516001600160a01b03161415612f595760405162461bcd60e51b815260040161097290614814565b600101612f03565b5033836040015184600001518560200151016001600160401b031681518110612f8657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508160070b60001415612fe9576020830180516001600160401b036001918201811692839052600b54600a5491169003011415612fe4575060026129f6565b613010565b82516001016001600160401b03908116808552600b549091161415613010575060016129f6565b50600092915050565b6001600160a01b03811660009081526020819052604090205460ff1615156001146130565760405162461bcd60e51b815260040161097290614a1c565b6009546001600160401b03166131f6576000805b6005548110156130ef576005818154811061308157fe5b9060005260206000200160405160200161309b91906145e9565b60405160208183030381529060405280519060200120846040516020016130c2919061444a565b6040516020818303038152906040528051906020012014156130e757600191506130ef565b60010161306a565b506001811515146131125760405162461bcd60e51b8152600401610972906148a9565b600090506060600484604051613128919061444a565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561318457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613166575b50939450600093505050505b81518110156131d7578181815181106131a557fe5b60200260200101516001600160a01b0316846001600160a01b031614156131cf57600192506131d7565b600101613190565b5081156109f15760405162461bcd60e51b81526004016109729061494c565b5050565b600b546001600160401b031661320f5761330b565b60608888888860405160200161322894939291906144fa565b604051602081830303815290604052905060608560405160200161324c919061444a565b60408051601f19818403018152919052905060005b85518110156132aa578186828151811061327757fe5b602002602001015160405160200161329092919061449a565b60408051601f198184030181529190529150600101613261565b50818180519060200120856040516020016132c793929190614466565b60408051601f19818403018152919052805160208201209092506132eb8185613749565b6133075760405162461bcd60e51b815260040161097290614915565b5050505b5050505050505050565b60006060600060019050606060405160200161333090610908565b6040516020818303038152906040528051906020012087604051602001613357919061444a565b60405160208183030381529060405280519060200120146134685760006060896001600160a01b031689604051602001613391919061457a565b60405160208183030381529060405289896040516024016133b392919061467b565b60408051601f1981840301815290829052916133ce9161444a565b60408051918290039091206020830180516001600160e01b03166001600160e01b031990921691909117905251613405919061444a565b6000604051808303816000865af19150503d8060008114613442576040519150601f19603f3d011682016040523d82523d6000602084013e613447565b606091505b5091509150819350808060200190518101906134639190613edc565b925050505b60019890975095505050505050565b60006060815b83518110156134c6578184828151811061349357fe5b60200260200101516040516020016134ac92919061449a565b60408051601f19818403018152919052915060010161347d565b50805160209091012092915050565b604080516028808252606082810190935282919060208201818036833701905050905060008080805b60148110156135c4578060130360080260020a8760601c6001600160a01b03168161352557fe5b049350601060ff85160492508260100284039150600a8360ff161061354b57605761354e565b60305b830160f81b85826002028151811061356257fe5b60200101906001600160f81b031916908160001a905350600a8260ff161061358b57605761358e565b60305b820160f81b8582600202600101815181106135a557fe5b60200101906001600160f81b031916908160001a9053506001016134fe565b509295945050505050565b6012816040516135df919061444a565b90815260405190819003602001812080546001600160401b038082166001011667ffffffffffffffff1990911617905560129061361d90839061444a565b908152604051908190036020019020546001600160401b031660011415610cfc57600e805460018101825560009190915281516131f6917fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd01906020840190613a66565b601182604051613691919061444a565b908152604051908190036020019020546001600160401b03166136f357600f805460018101825560009190915282516136f1917f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201906020850190613a66565b505b80601183604051613704919061444a565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff199092169190911790555050565b80601383604051613704919061444a565b6000805b825181101561394757606083828151811061376457fe5b60200260200101519050805160411461377d575061393f565b600080600061378b84613954565b9250925092506000600189858585604051600081526020016040526040516137b69493929190614746565b6020604051602081039080840390855afa1580156137d8573d6000803e3d6000fd5b505050602060405103519050613848600880548060200260200160405190810160405280929190818152602001828054801561383d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161381f575b505050505082613970565b15613939576138af600c80548060200260200160405190810160405280929190818152602001828054801561383d576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161381f57505050505082613970565b156138be57505050505061393f565b600c805460018101825560008290527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319166001600160a01b03841617905560095490546001600160401b0390911614156139395761392a600c6000613b19565b600196505050505050506129f6565b50505050505b60010161374d565b50613010600c6000613b19565b6020810151604082015160609092015160001a601b0192909190565b6000805b83518110156139bc57826001600160a01b031684828151811061399357fe5b60200260200101516001600160a01b031614156139b45760019150506129f6565b600101613974565b5060009392505050565b60405180608001604052806000151581526020016139e2613aff565b81526020016139ef613aff565b81526020016139fc613aff565b905290565b828054828255906000526020600020908101928215613a56579160200282015b82811115613a5657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613a21565b50613a62929150613bf5565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613aa757805160ff1916838001178555613ad4565b82800160010185558215613ad4579182015b82811115613ad4578251825591602001919060010190613ab9565b50613a62929150613c19565b6040518061050001604052806028906020820280368337509192915050565b604051806040016040528060608152602001606081525090565b5080546000825590600052602060002090810190610cfc9190613c19565b5080546000825590600052602060002090810190610cfc9190613c33565b6040805160808101825260008082526020820181905260609282018390529181019190915290565b6040805160608082018352600080835260208301529181019190915290565b828054828255906000526020600020908101928215613be9579160200282015b82811115613be95782518051613bd9918491602090910190613a66565b5091602001919060010190613bbc565b50613a62929150613c56565b61090891905b80821115613a625780546001600160a01b0319168155600101613bfb565b61090891905b80821115613a625760008155600101613c1f565b61090891905b80821115613a62576000613c4d8282613c79565b50600101613c39565b61090891905b80821115613a62576000613c708282613c79565b50600101613c5c565b50805460018160011615610100020316600290046000825580601f10613c9f5750610cfc565b601f016020900490600052602060002090810190610cfc9190613c19565b80356001600160a01b03811681146129f657600080fd5b600082601f830112613ce4578081fd5b8135613cf7613cf282614bd3565b614bad565b818152915060208083019084810160005b84811015613d3157613d1f888484358a0101613d4c565b84529282019290820190600101613d08565b505050505092915050565b803580151581146129f657600080fd5b600082601f830112613d5c578081fd5b8135613d6a613cf282614bf2565b9150808252836020828501011115613d8157600080fd5b8060208401602084013760009082016020015292915050565b80356001600160401b03811681146129f657600080fd5b600060208284031215613dc2578081fd5b613dcc8383613cbd565b9392505050565b60008060408385031215613de5578081fd5b8235613df081614c41565b91506020830135600781900b8114613e06578182fd5b809150509250929050565b600080600080600080600060e0888a031215613e2b578283fd5b8735613e3681614c41565b965060208801356001600160401b0380821115613e51578485fd5b613e5d8b838c01613d4c565b9750613e6c8b60408c01613d9a565b9650613e7b8b60608c01613d9a565b955060808a0135915080821115613e90578485fd5b613e9c8b838c01613cd4565b9450613eab8b60a08c01613d9a565b935060c08a0135915080821115613ec0578283fd5b50613ecd8a828b01613cd4565b91505092959891949750929550565b60006020808385031215613eee578182fd5b82516001600160401b03811115613f03578283fd5b80840185601f820112613f14578384fd5b80519150613f24613cf283614bd3565b82815283810190828501865b85811015613f9357815185018a603f820112613f4a578889fd5b87810151613f5a613cf282614bf2565b81815260408d81848601011115613f6f578b8cfd5b613f7e838c8401838701614c15565b50865250509286019290860190600101613f30565b509098975050505050505050565b600060208284031215613fb2578081fd5b81356001600160401b03811115613fc7578182fd5b613fd384828501613d4c565b949350505050565b60008060008060008060008060006101208a8c031215613ff9578182fd5b89356001600160401b038082111561400f578384fd5b61401b8d838e01613d4c565b9a5061402a8d60208e01613cbd565b99506140398d60408e01613d9a565b98506140488d60608e01613d9a565b975060808c013591508082111561405d578384fd5b6140698d838e01613d4c565b965060a08c013591508082111561407e578384fd5b61408a8d838e01613cd4565b95506140998d60c08e01613d9a565b945060e08c01359150808211156140ae578384fd5b506140bb8c828d01613cd4565b9250506140cc8b6101008c01613d3c565b90509295985092959850929598565b600080604083850312156140ed578182fd5b82356001600160401b0380821115614103578384fd5b61410f86838701613d4c565b9350602091508185013581811115614125578384fd5b85019050601f81018613614137578283fd5b8035614145613cf282614bd3565b81815283810190838501858402850186018a1015614161578687fd5b8694505b8385101561418b576141778a82613cbd565b835260019490940193918501918501614165565b5080955050505050509250929050565b600080600080600080600080610100898b0312156141b7578182fd5b88356001600160401b03808211156141cd578384fd5b6141d98c838d01613d4c565b995060208b01359150808211156141ee578384fd5b6141fa8c838d01613d4c565b985060408b013591508082111561420f578384fd5b61421b8c838d01613cd4565b975060608b0135915080821115614230578384fd5b61423c8c838d01613d4c565b965060808b0135915080821115614251578384fd5b61425d8c838d01613cd4565b955060a08b0135915080821115614272578384fd5b61427e8c838d01613d4c565b945060c08b0135915080821115614293578384fd5b506142a08b828c01613cd4565b9250506142b08a60e08b01613d3c565b90509295985092959890939650565b600080604083850312156142d1578182fd5b82356001600160401b03808211156142e7578384fd5b6142f386838701613d4c565b9350602085013591508082168214614309578283fd5b50809150509250929050565b6000815180845260208085018081965082840281019150828601855b8581101561435b5782840389526143498483516143ae565b98850198935090840190600101614331565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b8581101561435b57828403895261439c8483516143ae565b98850198935090840190600101614384565b600081518084526143c6816020860160208601614c15565b601f01601f19169290920160200192915050565b600081546001808216600081146143f8576001811461440f57614441565b60ff198316865260028304607f1686019350614441565b600283048560005260208060002060005b838110156144395781548a820152908501908201614420565b505050860193505b50505092915050565b6000825161445c818460208701614c15565b9190910192915050565b60008451614478818460208901614c15565b919091019283525060c01b6001600160c01b0319166020820152602801919050565b600083516144ac818460208801614c15565b83519083016144bf828260208801614c15565b01949350505050565b600083516144da818460208801614c15565b60c09390931b6001600160c01b0319169190920190815260080192915050565b6000855161450c818460208a01614c15565b855190830161451f828260208a01614c15565b6001600160c01b031960c096871b8116929091019182529390941b9092166008840152505060100192915050565b6000825161455f818460208701614c15565b682862797465735b5d2960b81b920191825250600901919050565b6000825161458c818460208701614c15565b6d2862797465735b5d2c626f6f6c2960901b920191825250600e01919050565b600083516145be818460208801614c15565b808301602d60f81b8152845191506145dd826001830160208801614c15565b01600101949350505050565b6000613dcc82846143da565b600061460182866143da565b601d60f91b80825261461660018301876143da565b8181528551925061462e836001830160208901614c15565b9091016001019695505050505050565b600061060f60f31b8252825161465b816002850160208701614c15565b9190910160020192915050565b600060208252613dcc6020830184614315565b60006040825261468e6040830185614315565b905082151560208301529392505050565b6000606082526146b26060830186614315565b931515602083015250901515604090910152919050565b600060208252613dcc6020830184614368565b6000604082526146ef6040830185614368565b828103602084810191909152845180835285820192820190845b8181101561472e5784516001600160401b031683529383019391830191600101614709565b5090979650505050505050565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252613dcc60208301846143ae565b60006060825261478a60608301866143ae565b828103602084015261479c8186614315565b9150508215156040830152949350505050565b6000604082526147c260408301856143ae565b82810360208401526147d481856143ae565b95945050505050565b6020808252601d908201527f496e766f6b657220617265206e6f7420696e207768697465206c697374000000604082015260600190565b60208082526022908201527f63757272656e74207573652068617320766f746564207468652070726f706f73604082015261185b60f21b606082015260800190565b60208082526033908201527f49425450207479706520616e64207478537461747573206973206e6f7420636f604082015272727265637420696e2072656c6179206d6f646560681b606082015260800190565b6020808252818101527f72656d6f74652073657276696365206973206e6f742072656769737465726564604082015260600190565b6020808252601d908201527f496e766f6b657220617265206e6f7420696e2061646d696e206c697374000000604082015260600190565b60208082526017908201527f696e76616c6964206d756c74692d7369676e6174757265000000000000000000604082015260600190565b60208082526032908201527f72656d6f74652073657276696365206973206e6f7420616c6c6f77656420746f6040820152712063616c6c2064657374206164647265737360701b606082015260800190565b60208082526027908201527f494254502074797065206973206e6f7420636f727265637420696e20646972656040820152666374206d6f646560c81b606082015260800190565b6020808252601b908201527f7468652070726f706f73616c20646f6573206e6f742065786973740000000000604082015260600190565b60208082526027908201527f646573742061646472657373206973206e6f7420696e206c6f63616c207768696040820152661d19481b1a5cdd60ca1b606082015260800190565b6020808252601c908201527f766f7465207374617475732073686f756c642062652030206f72203100000000604082015260600190565b60208082526021908201527f756e65787065637465642069627470207479706520616e6420747853746174756040820152607360f81b606082015260800190565b60006001600160401b038816825260c06020830152614afd60c08301886143ae565b8281036040840152614b0f81886143ae565b86151560608501528381036080850152614b298187614315565b925050508260a0830152979650505050505050565b60006001600160401b038816825260c06020830152614b6060c08301886143ae565b8281036040840152614b7281886143ae565b8381036060850152614b8481886143ae565b9150508281036080840152614b998186614315565b9150508260a0830152979650505050505050565b6040518181016001600160401b0381118282101715614bcb57600080fd5b604052919050565b60006001600160401b03821115614be8578081fd5b5060209081020190565b60006001600160401b03821115614c07578081fd5b50601f01601f191660200190565b60005b83811015614c30578181015183820152602001614c18565b838111156109f15750506000910152565b6001600160a01b0381168114610cfc57600080fdfea26469706673582212205bdcead08fb83bdf0b9f4662316db232d0f16cd4cf9a5757c0c56c9edb0d42f064736f6c634300060a0033"

// DeployBroker deploys a new Ethereum contract, binding an instance of Broker to it.
func DeployBroker(auth *bind.TransactOpts, backend bind.ContractBackend, _bitxhubID string, _appchainID string, _validators []common.Address, _valThreshold uint64, _admins []common.Address, _adminThreshold uint64) (common.Address, *types.Transaction, *Broker, error) {
	parsed, err := abi.JSON(strings.NewReader(BrokerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BrokerBin), backend, _bitxhubID, _appchainID, _validators, _valThreshold, _admins, _adminThreshold)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Broker{BrokerCaller: BrokerCaller{contract: contract}, BrokerTransactor: BrokerTransactor{contract: contract}, BrokerFilterer: BrokerFilterer{contract: contract}}, nil
}

// Broker is an auto generated Go binding around an Ethereum contract.
type Broker struct {
	BrokerCaller     // Read-only binding to the contract
	BrokerTransactor // Write-only binding to the contract
	BrokerFilterer   // Log filterer for contract events
}

// BrokerCaller is an auto generated read-only Go binding around an Ethereum contract.
type BrokerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrokerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BrokerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrokerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BrokerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrokerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BrokerSession struct {
	Contract     *Broker           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BrokerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BrokerCallerSession struct {
	Contract *BrokerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BrokerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BrokerTransactorSession struct {
	Contract     *BrokerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BrokerRaw is an auto generated low-level Go binding around an Ethereum contract.
type BrokerRaw struct {
	Contract *Broker // Generic contract binding to access the raw methods on
}

// BrokerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BrokerCallerRaw struct {
	Contract *BrokerCaller // Generic read-only contract binding to access the raw methods on
}

// BrokerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BrokerTransactorRaw struct {
	Contract *BrokerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBroker creates a new instance of Broker, bound to a specific deployed contract.
func NewBroker(address common.Address, backend bind.ContractBackend) (*Broker, error) {
	contract, err := bindBroker(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Broker{BrokerCaller: BrokerCaller{contract: contract}, BrokerTransactor: BrokerTransactor{contract: contract}, BrokerFilterer: BrokerFilterer{contract: contract}}, nil
}

// NewBrokerCaller creates a new read-only instance of Broker, bound to a specific deployed contract.
func NewBrokerCaller(address common.Address, caller bind.ContractCaller) (*BrokerCaller, error) {
	contract, err := bindBroker(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BrokerCaller{contract: contract}, nil
}

// NewBrokerTransactor creates a new write-only instance of Broker, bound to a specific deployed contract.
func NewBrokerTransactor(address common.Address, transactor bind.ContractTransactor) (*BrokerTransactor, error) {
	contract, err := bindBroker(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BrokerTransactor{contract: contract}, nil
}

// NewBrokerFilterer creates a new log filterer instance of Broker, bound to a specific deployed contract.
func NewBrokerFilterer(address common.Address, filterer bind.ContractFilterer) (*BrokerFilterer, error) {
	contract, err := bindBroker(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BrokerFilterer{contract: contract}, nil
}

// bindBroker binds a generic wrapper to an already deployed contract.
func bindBroker(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BrokerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Broker *BrokerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Broker.Contract.BrokerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Broker *BrokerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Broker.Contract.BrokerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Broker *BrokerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Broker.Contract.BrokerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Broker *BrokerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Broker.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Broker *BrokerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Broker.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Broker *BrokerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Broker.Contract.contract.Transact(opts, method, params...)
}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address account) pure returns(string asciiString)
func (_Broker *BrokerCaller) AddressToString(opts *bind.CallOpts, account common.Address) (string, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "addressToString", account)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address account) pure returns(string asciiString)
func (_Broker *BrokerSession) AddressToString(account common.Address) (string, error) {
	return _Broker.Contract.AddressToString(&_Broker.CallOpts, account)
}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address account) pure returns(string asciiString)
func (_Broker *BrokerCallerSession) AddressToString(account common.Address) (string, error) {
	return _Broker.Contract.AddressToString(&_Broker.CallOpts, account)
}

// GenFullServiceID is a free data retrieval call binding the contract method 0x32358c6d.
//
// Solidity: function genFullServiceID(string serviceID) view returns(string)
func (_Broker *BrokerCaller) GenFullServiceID(opts *bind.CallOpts, serviceID string) (string, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "genFullServiceID", serviceID)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GenFullServiceID is a free data retrieval call binding the contract method 0x32358c6d.
//
// Solidity: function genFullServiceID(string serviceID) view returns(string)
func (_Broker *BrokerSession) GenFullServiceID(serviceID string) (string, error) {
	return _Broker.Contract.GenFullServiceID(&_Broker.CallOpts, serviceID)
}

// GenFullServiceID is a free data retrieval call binding the contract method 0x32358c6d.
//
// Solidity: function genFullServiceID(string serviceID) view returns(string)
func (_Broker *BrokerCallerSession) GenFullServiceID(serviceID string) (string, error) {
	return _Broker.Contract.GenFullServiceID(&_Broker.CallOpts, serviceID)
}

// GetCallbackMeta is a free data retrieval call binding the contract method 0x3b6bbe4a.
//
// Solidity: function getCallbackMeta() view returns(string[], uint64[])
func (_Broker *BrokerCaller) GetCallbackMeta(opts *bind.CallOpts) ([]string, []uint64, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getCallbackMeta")

	if err != nil {
		return *new([]string), *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	out1 := *abi.ConvertType(out[1], new([]uint64)).(*[]uint64)

	return out0, out1, err

}

// GetCallbackMeta is a free data retrieval call binding the contract method 0x3b6bbe4a.
//
// Solidity: function getCallbackMeta() view returns(string[], uint64[])
func (_Broker *BrokerSession) GetCallbackMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetCallbackMeta(&_Broker.CallOpts)
}

// GetCallbackMeta is a free data retrieval call binding the contract method 0x3b6bbe4a.
//
// Solidity: function getCallbackMeta() view returns(string[], uint64[])
func (_Broker *BrokerCallerSession) GetCallbackMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetCallbackMeta(&_Broker.CallOpts)
}

// GetChainID is a free data retrieval call binding the contract method 0x564b81ef.
//
// Solidity: function getChainID() view returns(string, string)
func (_Broker *BrokerCaller) GetChainID(opts *bind.CallOpts) (string, string, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getChainID")

	if err != nil {
		return *new(string), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetChainID is a free data retrieval call binding the contract method 0x564b81ef.
//
// Solidity: function getChainID() view returns(string, string)
func (_Broker *BrokerSession) GetChainID() (string, string, error) {
	return _Broker.Contract.GetChainID(&_Broker.CallOpts)
}

// GetChainID is a free data retrieval call binding the contract method 0x564b81ef.
//
// Solidity: function getChainID() view returns(string, string)
func (_Broker *BrokerCallerSession) GetChainID() (string, string, error) {
	return _Broker.Contract.GetChainID(&_Broker.CallOpts)
}

// GetDstRollbackMeta is a free data retrieval call binding the contract method 0xed63513f.
//
// Solidity: function getDstRollbackMeta() view returns(string[], uint64[])
func (_Broker *BrokerCaller) GetDstRollbackMeta(opts *bind.CallOpts) ([]string, []uint64, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getDstRollbackMeta")

	if err != nil {
		return *new([]string), *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	out1 := *abi.ConvertType(out[1], new([]uint64)).(*[]uint64)

	return out0, out1, err

}

// GetDstRollbackMeta is a free data retrieval call binding the contract method 0xed63513f.
//
// Solidity: function getDstRollbackMeta() view returns(string[], uint64[])
func (_Broker *BrokerSession) GetDstRollbackMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetDstRollbackMeta(&_Broker.CallOpts)
}

// GetDstRollbackMeta is a free data retrieval call binding the contract method 0xed63513f.
//
// Solidity: function getDstRollbackMeta() view returns(string[], uint64[])
func (_Broker *BrokerCallerSession) GetDstRollbackMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetDstRollbackMeta(&_Broker.CallOpts)
}

// GetInnerMeta is a free data retrieval call binding the contract method 0x67b9fa3b.
//
// Solidity: function getInnerMeta() view returns(string[], uint64[])
func (_Broker *BrokerCaller) GetInnerMeta(opts *bind.CallOpts) ([]string, []uint64, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getInnerMeta")

	if err != nil {
		return *new([]string), *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	out1 := *abi.ConvertType(out[1], new([]uint64)).(*[]uint64)

	return out0, out1, err

}

// GetInnerMeta is a free data retrieval call binding the contract method 0x67b9fa3b.
//
// Solidity: function getInnerMeta() view returns(string[], uint64[])
func (_Broker *BrokerSession) GetInnerMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetInnerMeta(&_Broker.CallOpts)
}

// GetInnerMeta is a free data retrieval call binding the contract method 0x67b9fa3b.
//
// Solidity: function getInnerMeta() view returns(string[], uint64[])
func (_Broker *BrokerCallerSession) GetInnerMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetInnerMeta(&_Broker.CallOpts)
}

// GetLocalServiceList is a free data retrieval call binding the contract method 0x34a55404.
//
// Solidity: function getLocalServiceList() view returns(string[])
func (_Broker *BrokerCaller) GetLocalServiceList(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getLocalServiceList")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLocalServiceList is a free data retrieval call binding the contract method 0x34a55404.
//
// Solidity: function getLocalServiceList() view returns(string[])
func (_Broker *BrokerSession) GetLocalServiceList() ([]string, error) {
	return _Broker.Contract.GetLocalServiceList(&_Broker.CallOpts)
}

// GetLocalServiceList is a free data retrieval call binding the contract method 0x34a55404.
//
// Solidity: function getLocalServiceList() view returns(string[])
func (_Broker *BrokerCallerSession) GetLocalServiceList() ([]string, error) {
	return _Broker.Contract.GetLocalServiceList(&_Broker.CallOpts)
}

// GetOutMessage is a free data retrieval call binding the contract method 0x29793e6e.
//
// Solidity: function getOutMessage(string outServicePair, uint64 idx) view returns(string, bytes[], bool)
func (_Broker *BrokerCaller) GetOutMessage(opts *bind.CallOpts, outServicePair string, idx uint64) (string, [][]byte, bool, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getOutMessage", outServicePair, idx)

	if err != nil {
		return *new(string), *new([][]byte), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new([][]byte)).(*[][]byte)
	out2 := *abi.ConvertType(out[2], new(bool)).(*bool)

	return out0, out1, out2, err

}

// GetOutMessage is a free data retrieval call binding the contract method 0x29793e6e.
//
// Solidity: function getOutMessage(string outServicePair, uint64 idx) view returns(string, bytes[], bool)
func (_Broker *BrokerSession) GetOutMessage(outServicePair string, idx uint64) (string, [][]byte, bool, error) {
	return _Broker.Contract.GetOutMessage(&_Broker.CallOpts, outServicePair, idx)
}

// GetOutMessage is a free data retrieval call binding the contract method 0x29793e6e.
//
// Solidity: function getOutMessage(string outServicePair, uint64 idx) view returns(string, bytes[], bool)
func (_Broker *BrokerCallerSession) GetOutMessage(outServicePair string, idx uint64) (string, [][]byte, bool, error) {
	return _Broker.Contract.GetOutMessage(&_Broker.CallOpts, outServicePair, idx)
}

// GetOuterMeta is a free data retrieval call binding the contract method 0xc20cab50.
//
// Solidity: function getOuterMeta() view returns(string[], uint64[])
func (_Broker *BrokerCaller) GetOuterMeta(opts *bind.CallOpts) ([]string, []uint64, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getOuterMeta")

	if err != nil {
		return *new([]string), *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	out1 := *abi.ConvertType(out[1], new([]uint64)).(*[]uint64)

	return out0, out1, err

}

// GetOuterMeta is a free data retrieval call binding the contract method 0xc20cab50.
//
// Solidity: function getOuterMeta() view returns(string[], uint64[])
func (_Broker *BrokerSession) GetOuterMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetOuterMeta(&_Broker.CallOpts)
}

// GetOuterMeta is a free data retrieval call binding the contract method 0xc20cab50.
//
// Solidity: function getOuterMeta() view returns(string[], uint64[])
func (_Broker *BrokerCallerSession) GetOuterMeta() ([]string, []uint64, error) {
	return _Broker.Contract.GetOuterMeta(&_Broker.CallOpts)
}

// GetReceiptMessage is a free data retrieval call binding the contract method 0xca6954da.
//
// Solidity: function getReceiptMessage(string inServicePair, uint64 idx) view returns(bytes[], bool, bool)
func (_Broker *BrokerCaller) GetReceiptMessage(opts *bind.CallOpts, inServicePair string, idx uint64) ([][]byte, bool, bool, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getReceiptMessage", inServicePair, idx)

	if err != nil {
		return *new([][]byte), *new(bool), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)
	out2 := *abi.ConvertType(out[2], new(bool)).(*bool)

	return out0, out1, out2, err

}

// GetReceiptMessage is a free data retrieval call binding the contract method 0xca6954da.
//
// Solidity: function getReceiptMessage(string inServicePair, uint64 idx) view returns(bytes[], bool, bool)
func (_Broker *BrokerSession) GetReceiptMessage(inServicePair string, idx uint64) ([][]byte, bool, bool, error) {
	return _Broker.Contract.GetReceiptMessage(&_Broker.CallOpts, inServicePair, idx)
}

// GetReceiptMessage is a free data retrieval call binding the contract method 0xca6954da.
//
// Solidity: function getReceiptMessage(string inServicePair, uint64 idx) view returns(bytes[], bool, bool)
func (_Broker *BrokerCallerSession) GetReceiptMessage(inServicePair string, idx uint64) ([][]byte, bool, bool, error) {
	return _Broker.Contract.GetReceiptMessage(&_Broker.CallOpts, inServicePair, idx)
}

// GetRemoteServiceList is a free data retrieval call binding the contract method 0xaed18cf1.
//
// Solidity: function getRemoteServiceList() view returns(string[])
func (_Broker *BrokerCaller) GetRemoteServiceList(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Broker.contract.Call(opts, &out, "getRemoteServiceList")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetRemoteServiceList is a free data retrieval call binding the contract method 0xaed18cf1.
//
// Solidity: function getRemoteServiceList() view returns(string[])
func (_Broker *BrokerSession) GetRemoteServiceList() ([]string, error) {
	return _Broker.Contract.GetRemoteServiceList(&_Broker.CallOpts)
}

// GetRemoteServiceList is a free data retrieval call binding the contract method 0xaed18cf1.
//
// Solidity: function getRemoteServiceList() view returns(string[])
func (_Broker *BrokerCallerSession) GetRemoteServiceList() ([]string, error) {
	return _Broker.Contract.GetRemoteServiceList(&_Broker.CallOpts)
}

// Audit is a paid mutator transaction binding the contract method 0xb38ff85f.
//
// Solidity: function audit(address addr, int64 status) returns(bool)
func (_Broker *BrokerTransactor) Audit(opts *bind.TransactOpts, addr common.Address, status int64) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "audit", addr, status)
}

// Audit is a paid mutator transaction binding the contract method 0xb38ff85f.
//
// Solidity: function audit(address addr, int64 status) returns(bool)
func (_Broker *BrokerSession) Audit(addr common.Address, status int64) (*types.Transaction, error) {
	return _Broker.Contract.Audit(&_Broker.TransactOpts, addr, status)
}

// Audit is a paid mutator transaction binding the contract method 0xb38ff85f.
//
// Solidity: function audit(address addr, int64 status) returns(bool)
func (_Broker *BrokerTransactorSession) Audit(addr common.Address, status int64) (*types.Transaction, error) {
	return _Broker.Contract.Audit(&_Broker.TransactOpts, addr, status)
}

// EmitInterchainEvent is a paid mutator transaction binding the contract method 0xf4aa3077.
//
// Solidity: function emitInterchainEvent(string destFullServiceID, string funcCall, bytes[] args, string funcCb, bytes[] argsCb, string funcRb, bytes[] argsRb, bool isEncrypt) returns()
func (_Broker *BrokerTransactor) EmitInterchainEvent(opts *bind.TransactOpts, destFullServiceID string, funcCall string, args [][]byte, funcCb string, argsCb [][]byte, funcRb string, argsRb [][]byte, isEncrypt bool) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "emitInterchainEvent", destFullServiceID, funcCall, args, funcCb, argsCb, funcRb, argsRb, isEncrypt)
}

// EmitInterchainEvent is a paid mutator transaction binding the contract method 0xf4aa3077.
//
// Solidity: function emitInterchainEvent(string destFullServiceID, string funcCall, bytes[] args, string funcCb, bytes[] argsCb, string funcRb, bytes[] argsRb, bool isEncrypt) returns()
func (_Broker *BrokerSession) EmitInterchainEvent(destFullServiceID string, funcCall string, args [][]byte, funcCb string, argsCb [][]byte, funcRb string, argsRb [][]byte, isEncrypt bool) (*types.Transaction, error) {
	return _Broker.Contract.EmitInterchainEvent(&_Broker.TransactOpts, destFullServiceID, funcCall, args, funcCb, argsCb, funcRb, argsRb, isEncrypt)
}

// EmitInterchainEvent is a paid mutator transaction binding the contract method 0xf4aa3077.
//
// Solidity: function emitInterchainEvent(string destFullServiceID, string funcCall, bytes[] args, string funcCb, bytes[] argsCb, string funcRb, bytes[] argsRb, bool isEncrypt) returns()
func (_Broker *BrokerTransactorSession) EmitInterchainEvent(destFullServiceID string, funcCall string, args [][]byte, funcCb string, argsCb [][]byte, funcRb string, argsRb [][]byte, isEncrypt bool) (*types.Transaction, error) {
	return _Broker.Contract.EmitInterchainEvent(&_Broker.TransactOpts, destFullServiceID, funcCall, args, funcCb, argsCb, funcRb, argsRb, isEncrypt)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Broker *BrokerTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Broker *BrokerSession) Initialize() (*types.Transaction, error) {
	return _Broker.Contract.Initialize(&_Broker.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Broker *BrokerTransactorSession) Initialize() (*types.Transaction, error) {
	return _Broker.Contract.Initialize(&_Broker.TransactOpts)
}

// InvokeInterchain is a paid mutator transaction binding the contract method 0xd128dc05.
//
// Solidity: function invokeInterchain(string srcFullID, address destAddr, uint64 index, uint64 typ, string callFunc, bytes[] args, uint64 txStatus, bytes[] signatures, bool isEncrypt) payable returns()
func (_Broker *BrokerTransactor) InvokeInterchain(opts *bind.TransactOpts, srcFullID string, destAddr common.Address, index uint64, typ uint64, callFunc string, args [][]byte, txStatus uint64, signatures [][]byte, isEncrypt bool) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "invokeInterchain", srcFullID, destAddr, index, typ, callFunc, args, txStatus, signatures, isEncrypt)
}

// InvokeInterchain is a paid mutator transaction binding the contract method 0xd128dc05.
//
// Solidity: function invokeInterchain(string srcFullID, address destAddr, uint64 index, uint64 typ, string callFunc, bytes[] args, uint64 txStatus, bytes[] signatures, bool isEncrypt) payable returns()
func (_Broker *BrokerSession) InvokeInterchain(srcFullID string, destAddr common.Address, index uint64, typ uint64, callFunc string, args [][]byte, txStatus uint64, signatures [][]byte, isEncrypt bool) (*types.Transaction, error) {
	return _Broker.Contract.InvokeInterchain(&_Broker.TransactOpts, srcFullID, destAddr, index, typ, callFunc, args, txStatus, signatures, isEncrypt)
}

// InvokeInterchain is a paid mutator transaction binding the contract method 0xd128dc05.
//
// Solidity: function invokeInterchain(string srcFullID, address destAddr, uint64 index, uint64 typ, string callFunc, bytes[] args, uint64 txStatus, bytes[] signatures, bool isEncrypt) payable returns()
func (_Broker *BrokerTransactorSession) InvokeInterchain(srcFullID string, destAddr common.Address, index uint64, typ uint64, callFunc string, args [][]byte, txStatus uint64, signatures [][]byte, isEncrypt bool) (*types.Transaction, error) {
	return _Broker.Contract.InvokeInterchain(&_Broker.TransactOpts, srcFullID, destAddr, index, typ, callFunc, args, txStatus, signatures, isEncrypt)
}

// InvokeReceipt is a paid mutator transaction binding the contract method 0x69b2f0f5.
//
// Solidity: function invokeReceipt(address srcAddr, string dstFullID, uint64 index, uint64 typ, bytes[] result, uint64 txStatus, bytes[] signatures) payable returns()
func (_Broker *BrokerTransactor) InvokeReceipt(opts *bind.TransactOpts, srcAddr common.Address, dstFullID string, index uint64, typ uint64, result [][]byte, txStatus uint64, signatures [][]byte) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "invokeReceipt", srcAddr, dstFullID, index, typ, result, txStatus, signatures)
}

// InvokeReceipt is a paid mutator transaction binding the contract method 0x69b2f0f5.
//
// Solidity: function invokeReceipt(address srcAddr, string dstFullID, uint64 index, uint64 typ, bytes[] result, uint64 txStatus, bytes[] signatures) payable returns()
func (_Broker *BrokerSession) InvokeReceipt(srcAddr common.Address, dstFullID string, index uint64, typ uint64, result [][]byte, txStatus uint64, signatures [][]byte) (*types.Transaction, error) {
	return _Broker.Contract.InvokeReceipt(&_Broker.TransactOpts, srcAddr, dstFullID, index, typ, result, txStatus, signatures)
}

// InvokeReceipt is a paid mutator transaction binding the contract method 0x69b2f0f5.
//
// Solidity: function invokeReceipt(address srcAddr, string dstFullID, uint64 index, uint64 typ, bytes[] result, uint64 txStatus, bytes[] signatures) payable returns()
func (_Broker *BrokerTransactorSession) InvokeReceipt(srcAddr common.Address, dstFullID string, index uint64, typ uint64, result [][]byte, txStatus uint64, signatures [][]byte) (*types.Transaction, error) {
	return _Broker.Contract.InvokeReceipt(&_Broker.TransactOpts, srcAddr, dstFullID, index, typ, result, txStatus, signatures)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address addr) returns()
func (_Broker *BrokerTransactor) Register(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "register", addr)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address addr) returns()
func (_Broker *BrokerSession) Register(addr common.Address) (*types.Transaction, error) {
	return _Broker.Contract.Register(&_Broker.TransactOpts, addr)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address addr) returns()
func (_Broker *BrokerTransactorSession) Register(addr common.Address) (*types.Transaction, error) {
	return _Broker.Contract.Register(&_Broker.TransactOpts, addr)
}

// RegisterCounterParty is a paid mutator transaction binding the contract method 0x3b34aa94.
//
// Solidity: function registerCounterParty(string serviceID, address[] banList) returns()
func (_Broker *BrokerTransactor) RegisterCounterParty(opts *bind.TransactOpts, serviceID string, banList []common.Address) (*types.Transaction, error) {
	return _Broker.contract.Transact(opts, "registerCounterParty", serviceID, banList)
}

// RegisterCounterParty is a paid mutator transaction binding the contract method 0x3b34aa94.
//
// Solidity: function registerCounterParty(string serviceID, address[] banList) returns()
func (_Broker *BrokerSession) RegisterCounterParty(serviceID string, banList []common.Address) (*types.Transaction, error) {
	return _Broker.Contract.RegisterCounterParty(&_Broker.TransactOpts, serviceID, banList)
}

// RegisterCounterParty is a paid mutator transaction binding the contract method 0x3b34aa94.
//
// Solidity: function registerCounterParty(string serviceID, address[] banList) returns()
func (_Broker *BrokerTransactorSession) RegisterCounterParty(serviceID string, banList []common.Address) (*types.Transaction, error) {
	return _Broker.Contract.RegisterCounterParty(&_Broker.TransactOpts, serviceID, banList)
}

// BrokerThrowInterchainEventIterator is returned from FilterThrowInterchainEvent and is used to iterate over the raw logs and unpacked data for ThrowInterchainEvent events raised by the Broker contract.
type BrokerThrowInterchainEventIterator struct {
	Event *BrokerThrowInterchainEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrokerThrowInterchainEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrokerThrowInterchainEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrokerThrowInterchainEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrokerThrowInterchainEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrokerThrowInterchainEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrokerThrowInterchainEvent represents a ThrowInterchainEvent event raised by the Broker contract.
type BrokerThrowInterchainEvent struct {
	Index     uint64
	DstFullID string
	SrcFullID string
	Func      string
	Args      [][]byte
	Hash      [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterThrowInterchainEvent is a free log retrieval operation binding the contract event 0x709f2860ba85ce973413f9ae5240df255cb8abe488e609da35106f143e2cdb49.
//
// Solidity: event throwInterchainEvent(uint64 index, string dstFullID, string srcFullID, string func, bytes[] args, bytes32 hash)
func (_Broker *BrokerFilterer) FilterThrowInterchainEvent(opts *bind.FilterOpts) (*BrokerThrowInterchainEventIterator, error) {

	logs, sub, err := _Broker.contract.FilterLogs(opts, "throwInterchainEvent")
	if err != nil {
		return nil, err
	}
	return &BrokerThrowInterchainEventIterator{contract: _Broker.contract, event: "throwInterchainEvent", logs: logs, sub: sub}, nil
}

// WatchThrowInterchainEvent is a free log subscription operation binding the contract event 0x709f2860ba85ce973413f9ae5240df255cb8abe488e609da35106f143e2cdb49.
//
// Solidity: event throwInterchainEvent(uint64 index, string dstFullID, string srcFullID, string func, bytes[] args, bytes32 hash)
func (_Broker *BrokerFilterer) WatchThrowInterchainEvent(opts *bind.WatchOpts, sink chan<- *BrokerThrowInterchainEvent) (event.Subscription, error) {

	logs, sub, err := _Broker.contract.WatchLogs(opts, "throwInterchainEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrokerThrowInterchainEvent)
				if err := _Broker.contract.UnpackLog(event, "throwInterchainEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseThrowInterchainEvent is a log parse operation binding the contract event 0x709f2860ba85ce973413f9ae5240df255cb8abe488e609da35106f143e2cdb49.
//
// Solidity: event throwInterchainEvent(uint64 index, string dstFullID, string srcFullID, string func, bytes[] args, bytes32 hash)
func (_Broker *BrokerFilterer) ParseThrowInterchainEvent(log types.Log) (*BrokerThrowInterchainEvent, error) {
	event := new(BrokerThrowInterchainEvent)
	if err := _Broker.contract.UnpackLog(event, "throwInterchainEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrokerThrowReceiptEventIterator is returned from FilterThrowReceiptEvent and is used to iterate over the raw logs and unpacked data for ThrowReceiptEvent events raised by the Broker contract.
type BrokerThrowReceiptEventIterator struct {
	Event *BrokerThrowReceiptEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrokerThrowReceiptEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrokerThrowReceiptEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrokerThrowReceiptEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrokerThrowReceiptEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrokerThrowReceiptEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrokerThrowReceiptEvent represents a ThrowReceiptEvent event raised by the Broker contract.
type BrokerThrowReceiptEvent struct {
	Index     uint64
	DstFullID string
	SrcFullID string
	Status    bool
	Result    [][]byte
	Hash      [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterThrowReceiptEvent is a free log retrieval operation binding the contract event 0xb4dfde3e6cb30bf8f03d620d311b1dba8c953ee5083316166bf74e7b67f3b182.
//
// Solidity: event throwReceiptEvent(uint64 index, string dstFullID, string srcFullID, bool status, bytes[] result, bytes32 hash)
func (_Broker *BrokerFilterer) FilterThrowReceiptEvent(opts *bind.FilterOpts) (*BrokerThrowReceiptEventIterator, error) {

	logs, sub, err := _Broker.contract.FilterLogs(opts, "throwReceiptEvent")
	if err != nil {
		return nil, err
	}
	return &BrokerThrowReceiptEventIterator{contract: _Broker.contract, event: "throwReceiptEvent", logs: logs, sub: sub}, nil
}

// WatchThrowReceiptEvent is a free log subscription operation binding the contract event 0xb4dfde3e6cb30bf8f03d620d311b1dba8c953ee5083316166bf74e7b67f3b182.
//
// Solidity: event throwReceiptEvent(uint64 index, string dstFullID, string srcFullID, bool status, bytes[] result, bytes32 hash)
func (_Broker *BrokerFilterer) WatchThrowReceiptEvent(opts *bind.WatchOpts, sink chan<- *BrokerThrowReceiptEvent) (event.Subscription, error) {

	logs, sub, err := _Broker.contract.WatchLogs(opts, "throwReceiptEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrokerThrowReceiptEvent)
				if err := _Broker.contract.UnpackLog(event, "throwReceiptEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseThrowReceiptEvent is a log parse operation binding the contract event 0xb4dfde3e6cb30bf8f03d620d311b1dba8c953ee5083316166bf74e7b67f3b182.
//
// Solidity: event throwReceiptEvent(uint64 index, string dstFullID, string srcFullID, bool status, bytes[] result, bytes32 hash)
func (_Broker *BrokerFilterer) ParseThrowReceiptEvent(log types.Log) (*BrokerThrowReceiptEvent, error) {
	event := new(BrokerThrowReceiptEvent)
	if err := _Broker.contract.UnpackLog(event, "throwReceiptEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
